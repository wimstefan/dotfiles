#!/usr/bin/env zsh
# my zsh config
# vim: foldmethod=marker foldlevel=1 textwidth=200

# BEGIN shell config # {{{1
# - Options {{{2
# Check them with: print -C2 -a ${(kv)options} | sort | less
## 2013-01-21: for now I disable everything which I think I don't need and just enable it if lacking ...
##             the rest will be eliminated ;-)
# Changing Directories
setopt    auto_cd                 # enables you to omit 'cd' before a path
# Completion
setopt    complete_in_word        # Complete from both ends of a word.
setopt    always_to_end           # Move cursor to the end of a completed word.
setopt    path_dirs               # Perform path search even on command names with slashes.
setopt    auto_menu               # Show completion menu on a succesive tab press.
setopt    auto_list               # Automatically list choices on ambiguous completion.
# Expansion and Globbing
#setopt    brace_ccl               # {a-z} {0-2} etc expansion
setopt    extended_glob           # treat the `#', `~' and `^' characters as part of patterns for filename generation
#setopt NO_glob_dots               # files beginning with a . are matched without explicitly specifying the dot
#setopt NO_nomatch                 # try to avoid the 'zsh: no matches found...'
#setopt    numeric_glob_sort       # enables numeric order in globs
# History
setopt    append_history          # allow multiple terminal sessions to all append to one zsh command history
setopt    inc_append_history      # add comamnds as they are typed, don't wait until shell exit
setopt    share_history           # share history between all instances
setopt    extended_history        # save each command's beginning timestamp and the duration to the history file
setopt    hist_expire_dups_first  # clear duplicates first if history gets trimmed down
setopt    hist_find_no_dups       # ignore duplicates in history search
setopt    hist_ignore_dups        # this will not put _consecutive_ duplicates in the history
setopt    hist_ignore_all_dups    # this will older duplicates in the history
setopt    hist_save_no_dups       # when writing out the history file, older commands that duplicate newer ones are omitted
setopt    hist_ignore_space       # remove command lines from the history list when the first character on the line is a space
setopt    hist_reduce_blanks      # remove extra blanks from each command line being added to history
setopt    hist_verify             # when doing history substitution, put the substituted line into the line editor
# Input/Output
setopt    clobber                 # this will prohibit 'cat foo > bar' if bar exists. use >! instead
setopt    correct                 # try to correct the spelling of commands
setopt NO_correct_all             # try to correct the spelling of all arguments in a line
setopt    short_loops             # 'for i in *; echo $i;' instead of 'for i in *; do echo $i; done'
# Job Control
#setopt NO_hup                     # send *not* a HUP signal to running jobs when the shell exits
#setopt NO_bg_nice                 # run all background jobs at a lower priority
#setopt    long_list_jobs          # show job number & PID when suspending
#setopt    notify                  # this will put info from finished background processes over the current line
# Prompting
setopt    prompt_subst            # allow substition with $PS1, etc. Needed for vcs_info
# Paths
typeset -U path cdpath fpath manpath # Remove duplicates in the following arrays.
# }}}2
# - Colors {{{2
autoload -U colors && colors
eval `dircolors -b /etc/DIR_COLORS`
export ZLS_COLORS=$LS_COLORS

# }}}2
# - Completion {{{2
zmodload zsh/complist
autoload -U compinit && compinit -u

zstyle ':completion:*' completer _complete _approximate

zstyle ':completion:complete:*' use-cache on
zstyle ':completion:complete:*' cache-path '${XDG_CACHE_HOME}/zsh'

zstyle ':completion:*' menu select search
zstyle ':completion:*' complete-options true
zstyle ':completion:*' squeeze-slashes false
zstyle ':completion:*' file-sort modification follow
zstyle ':completion:*' rehash true
zstyle ':completion:*' verbose true

zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:options' auto-description '%d'
zstyle ':completion:*:descriptions' format ' %F{yellow}-- %d --%f'
zstyle ':completion:*:messages' format ' %F{purple} -- %d --%f'
zstyle ':completion:*:corrections' format ' %F{green}-- %d (errors: %e) --%f'
zstyle ':completion:*:warnings' format ' %F{red}-- no matches found --%f'
zstyle ':completion:*:default' list-prompt '%S%M matches%s'
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

zstyle ':completion:*' group-name ''
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

zstyle ':completion:*:history-words' stop yes
zstyle ':completion:*:history-words' remove-all-dups yes
zstyle ':completion:*:history-words' list false
zstyle ':completion:*:history-words' menu yes

zstyle ':completion:*:manuals' separate-sections true
zstyle ':completion:*:manuals.*' insert-sections true

zstyle ':completion:*' keep-prefix true

zstyle -e ':completion:*:(ssh|scp|sftp|rsh|rsync):hosts' hosts 'reply=(${=${${(f)"$(cat {/etc/ssh_,~/.ssh/known_}hosts(|2)(N) /dev/null)"}%%[# ]*}//,/ })'

bindkey -M menuselect '^xg' clear-screen
bindkey -M menuselect '^xi' vi-insert
bindkey -M menuselect '^xh' accept-and-hold
bindkey -M menuselect '^xn' accept-and-infer-next-history
bindkey -M menuselect '^xu' undo
# }}}2
# - Key bindings {{{2
# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
typeset -A key

key[Home]=${terminfo[khome]}
key[End]=${terminfo[kend]}
key[Insert]=${terminfo[kich1]}
key[Delete]=${terminfo[kdch1]}
key[Up]=${terminfo[kcuu1]}
key[Down]=${terminfo[kcud1]}
key[Left]=${terminfo[kcub1]}
key[Right]=${terminfo[kcuf1]}
key[PageUp]=${terminfo[kpp]}
key[PageDown]=${terminfo[knp]}

# setup key accordingly
[[ -n ${key[Home]}     ]]  && bindkey  ${key[Home]}     beginning-of-line
[[ -n ${key[End]}      ]]  && bindkey  ${key[End]}      end-of-line
[[ -n ${key[Insert]}   ]]  && bindkey  ${key[Insert]}   overwrite-mode
[[ -n ${key[Delete]}   ]]  && bindkey  ${key[Delete]}   delete-char
[[ -n ${key[Up]}       ]]  && bindkey  ${key[Up]}       up-line-or-history
[[ -n ${key[Down]}     ]]  && bindkey  ${key[Down]}     down-line-or-history
[[ -n ${key[PageUp]}   ]]  && bindkey  ${key[PageUp]}   up-line-or-search
[[ -n ${key[PageDown]} ]]  && bindkey  ${key[PageDown]} down-line-or-search
[[ -n ${key[Left]}     ]]  && bindkey  ${key[Left]}     backward-char
[[ -n ${key[Right]}    ]]  && bindkey  ${key[Right]}    forward-char

# separate local & global history
function only-local-history () {
  zle set-local-history 1
  zle up-history
  zle set-local-history 0
}
zle -N only-local-history
bindkey '^[[1;5A' only-local-history

## vi-mode ##
# Invoke it even though it should already be activated by $EDITOR
bindkey -v

# Remove mode switching delay.
KEYTIMEOUT=4

# allow v to edit the command line (standard behaviour)
autoload -Uz edit-command-line
bindkey -M vicmd v edit-command-line

cursor_mode() {
  cursor_block='\e[5 q'
  cursor_beam='\e[1 q'

  function zle-keymap-select {
    if [[ ${KEYMAP} == vicmd ]] ||
      [[ $1 = 'block' ]]; then
      echo -ne $cursor_block
    elif [[ ${KEYMAP} == main ]] ||
      [[ ${KEYMAP} == viins ]] ||
      [[ ${KEYMAP} = '' ]] ||
      [[ $1 = 'beam' ]]; then
      echo -ne $cursor_beam
    fi
  }

  zle-line-init() {
    echo -ne $cursor_beam
  }

  zle -N edit-command-line
  zle -N zle-keymap-select
  zle -N zle-line-init
}

cursor_mode

# }}}2
# - MIME types # {{{2
autoload -U zsh-mime-setup zsh-mime-handler && zsh-mime-setup
# }}}2
# - Prompt {{{2
autoload -Uz promptinit
promptinit
local curdir='%~'
local hostname='%M'
local username='%n'
local bold='%B'
local unbold='%b'
local standout='%S'
local unstandout='%s'
local underline='%U'
local ununderline='%u'
local colorfg='%F'
local uncolorfg='%f'
local colorbg='%K'
local uncolorbg='%k'
local mytime='%*'
local mydate='%D'
local line_tty='%y'
local rootorwhat='%(!.#.Â»)'
local return_status='%?'

autoload -Uz vcs_info

zstyle ':vcs_info:*' enable git hg svn
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' use-simple true
zstyle ':vcs_info:*' unstagedstr '%B%F{cyan}^u %f%b'
zstyle ':vcs_info:*' stagedstr '%B%F{yellow}^s %f%b'

zstyle ':vcs_info:*' formats '%B[%F{yellow}%s%f%%b: %F{green}%b%f %m%c%u%B]%%b'
zstyle ':vcs_info:*' actionformats '%B[%F{yellow}%s%f%%b: %F{green}%b@%a%f %m%c%u%B]%%b'

zstyle ':vcs_info:git*+set-message:*' hooks git-untracked git-aheadbehind git-remotebranch git-changes
### git: Show marker if there are untracked files in repository
function +vi-git-untracked() {
  if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == 'true' ]] && \
    git status --porcelain | fgrep '??' &> /dev/null ; then
    # This will show the marker if there are any untracked files in repo.
    # If instead you want to show the marker only if there are untracked
    # files in $PWD, use:
    #[[ -n $(git ls-files --others --exclude-standard) ]] ; then
    hook_com[unstaged]+="%B%F{red}^x %f%b"
  fi
}

### git: Show +N/-N when your local branch is ahead-of or behind remote HEAD.
function +vi-git-aheadbehind() {
  local ahead behind
  local -a gitstatus

  ahead=$(git rev-list ${hook_com[branch]}@{upstream}..HEAD 2>/dev/null | wc -l | tr -d ' ')
  (( $ahead )) && gitstatus+=( " %F{magenta}+${ahead}%f " )

  behind=$(git rev-list HEAD..${hook_com[branch]}@{upstream} 2>/dev/null | wc -l | tr -d ' ')
  (( $behind )) && gitstatus+=( " %B%F{magenta}-${behind}%f%b " )

  hook_com[misc]+=${(j::)gitstatus}
}

### git: Show remote branch name for remote-tracking branches
function +vi-git-remotebranch() {
  local remote

  # Are we on a remote-tracking branch?
  remote=${$(git rev-parse --verify ${hook_com[branch]}@{upstream} \
    --symbolic-full-name 2>/dev/null)/refs\/remotes\/}

  # The first test will show a tracking branch whenever there is one. The
  # second test, however, will only show the remote branch's name if it
  # differs from the local one.
  #if [[ -n ${remote} ]] ; then
  if [[ -n ${remote} && ${remote#*/} != ${hook_com[branch]} ]] ; then
    hook_com[branch]="${hook_com[branch]}(%F{cyan}${remote}%f)"
  fi
}

### git: Show changes, insertions + deletions
function +vi-git-changes() {
  local stats
  local -a gitdiff

  stats="$(git diff --shortstat 2>/dev/null)"

  local s_ch
  if [[ "$stats" = *changed* ]]; then
    s_ch="~$( echo $stats | sed -s 's/^ \([0-9]*\)\s*file.*/\1/')"
  else
    s_ch=""
  fi

  local s_ins
  if [[ "$stats" = *insertion* ]]; then
    s_ins=" %F{green}+$(echo $stats | sed -s 's/^.*,\s\([0-9]*\)\s*insertion.*/\1/')%f"
  else
    s_ins=""
  fi

  local s_del
  if [[ "$stats" = *deletion* ]]; then
    s_del=" %F{red}-$(echo $stats | sed -s 's/^.*,\s\([0-9]*\)\s*deletion.*/\1/')%f"
  else
    s_del=""
  fi

  if [[ -n $s_ch ]]; then
    s_lines="($s_ch$s_ins$s_del) "
  else
    s_lines=""
  fi
  gitdiff+=( "${s_lines}" )

  hook_com[misc]+=${(j::)gitdiff}
}

precmd() {
  vcs_info
}

# }}}2
# - Misc {{{2
autoload -U run-help url-quote-magic zcalc zmv
autoload -Uz bracketed-paste-magic
zle -N bracketed-paste bracketed-paste-magic
# }}}2
# END shell config # }}}1
# BEGIN user config # {{{1
# * Common config for *every* user # {{{2
# - Exports {{{3
if [[ '$(command -v nvim)' ]]; then
  export EDITOR=nvim
  export VISUAL=nvim
  export MANPAGER='nvim +Man!'
  export MANWIDTH=999
  alias -g V='| nview -c "set ft=man nonumber nolist showtabline=0 foldcolumn=0"'
  alias v='nvim -R'
  alias nview='nvim -R'
  alias nvimdiff='nvim -d'
else
  export EDITOR=vim
  export VISUAL=vim
  alias -g V='| vimpager'
  alias v=view
fi
export HISTFILE=${ZDOTDIR}/histfile
export HISTSIZE=5000
export SAVEHIST=5000
export MAKEFLAGS="-j $(nproc)"
export CVS_RSH='ssh'
export FZF_DEFAULT_OPTS='-m --cycle --border --layout=reverse --inline-info --height ~90% --padding 1 --margin 1 --preview "bat {}" --preview-window right:70%:hidden:wrap --bind "?:toggle-preview" --color=bg+:-1,fg+:-1,hl:36,hl+:36,info:75'
export FZF_CTRL_T_OPTS='--preview "bat {}" --preview-window right:70%:hidden:wrap --bind "?:toggle-preview"'
export HIGHLIGHT_STYLE='github'
export XAUTHORITY=${HOME}/.Xauthority
export DISPLAY=:0.0
# anti aliasing in the two toolkits
export GDK_USE_XFT=1
export QT_XFT=true


# }}}3
# - Aliases {{{3
# generic aliases
alias -g B='| bat'
alias -g G='| ug'
alias -g L='| less'
alias -g W='| wc -l'
alias -g Z='| fzf'
# commands
alias ls=exa
alias l1='exa -1'
alias ll='exa -hlg --git'
alias lt='exa -hlg --git --sort=new'
alias la='exa -hlga --git'
alias lr='exa -hlgR --git --tree --icons $@'
alias lS='exa -hlg --git --sort=size --reverse'
alias b=${(z)BROWSER}
alias e=${(z)VISUAL:-${(z)EDITOR}}
alias p=${(z)PAGER}
alias rm='rm -i --preserve-root'
alias cp='nocorrect cp -i'
alias mv='nocorrect mv -i'
alias scp=rsync
alias mkdir='nocorrect mkdir -p --verbose'
alias mdkir=mkdir
alias locate='locate -i'
alias dmesg='dmesg --human'
alias les=less
alias gcal='gcal -s1'
alias cr=check-repos.sh
alias duf='duf -theme ansi'
alias mtr='mtr --curses'
alias eix='eix --force-color'
alias history='history -i -44'
alias time=/usr/bin/time
alias explore=vifmrun
alias x='explore .'
alias lg=lazygit
## ugrep
alias uq='ug -Q'
alias ux='ug -UX'
alias uz='ug -z'
alias ugit='ug -R --ignore-files'
alias grep='ugrep -G'
alias egrep='ugrep -E'
alias fgrep='ugrep -F'
alias xgrep='ugrep -W'
alias zgrep='ugrep -zG'
alias zegrep='ugrep -zE'
alias zfgrep='ugrep -zF'
alias zpgrep='ugrep -zP'
alias zxgrep='ugrep -zW'
alias xdump='ugrep -X ""'
# shortcuts
alias xreload='xrdb ${HOME}/.Xresources'
alias zreload='exec zsh'
alias el='equery list -p -o'
alias sf='setfont ter-112n'
alias unmount='udevil unmount'
# urls
alias packages='w3m https://packages.gentoo.org/'
alias 24bugs='w3m "https://bugs.gentoo.org/buglist.cgi?query_format=advanced&chfieldfrom=-1D&chfieldto=Now&chfield=[Bug+creation]&order=bugs.bug_id"'
# }}}3
# - Functions {{{3
function dus()  { du -s $@ | sort -rn; }

function hc() { herbstclient $@ }

function dirdiff() { # compare two directories with vim
  DIR1=$(printf '%q' $1); shift
  DIR2=$(printf '%q' $1); shift
  $EDITOR $@ -c DirDiff\ ${DIR1}\ ${DIR2}
}

function viz() { # edit AND source ~/.zshrc
  $EDITOR $HOME/.dotfiles/zsh/zshrc && exec zsh
}

function et() {
  echo 'Trash size: ' $(du -hs $HOME/.local/share/Trash | awk '{print $1}')
  echo 'Do you want to empty the trashbin?            [Yes/No]'
  read RESPONSE
  case $RESPONSE in
    'Yes' | 'Y' | 'y' )
      /bin/rm -r $HOME/.local/share/Trash/*
      ;;
    'No' | 'N' | 'n' )
      /bin/echo 'Ok for now'
      ;;
    *)
      /bin/echo 'Please answer with Yes or No ...'
  esac
}

function check-overlays() {
for i in $(layman -l | awk '{print $2}'); echo "\n*** Overlay $i ***\n" && eix -c --installed-in-overlay $i
}

function fman() { # use fzf to list all manpages and read
  man -k . | fzf --prompt='Man> ' | awk '{print $1}' | xargs -r man
}

# Dynamic titles
function terminal_title_precmd() {
    print -Pn -- "\e]2;%n@%m:%~\a"
}
function terminal_title_preexec() {
    print -Pn -- "\e]2;${(q)1}\a"
}
# Title hooks
add-zsh-hook -Uz precmd terminal_title_precmd
add-zsh-hook -Uz preexec terminal_title_preexec

function npm-update()
{
  echo 'Installed packages:'
  npm -g list
  for i in $(npm -g outdated | rg -v Package | awk '{print $1}'); echo "--- $i ---" && npm -g update $i
}

function pip-update()
{
  for i in $(pip freeze --user | cut -d '=' -f 1); echo "--- $i ---" && pip install -U --user $i
}

# }}}3
stty -ixon
# }}}2
# * Non-root config # {{{2
if [[ $USER != root ]]; then
  echo "Initializing user settings for $USER ..."
  # - Prompt {{{3
  PROMPT='$bold$colorfg{blue}$mytime $colorfg{green}[$username]$uncolorfg $unbold$curdir $rootorwhat '
  if [[ -n ${vcs_info_msg_0_} ]]; then
    RPROMPT+=''
  else
    RPROMPT+=' ${vcs_info_msg_0_}'
  fi
  if [[ -n $SSH_CONNECTION ]]; then
    RPROMPT+=' $bold$colorfg{red}[$hostname]$uncolorfg$unbold'
  fi

  # }}}3
  # - Exports {{{3
  path=($HOME/.local/bin $HOME/.cargo/bin $HOME/.gem/ruby/bin $HOME/go/bin $path)
  manpath=($HOME/.local/share/man $manpath)
  export MPD_HOST=localhost
  export MPD_PORT=6600
  export GPG_TTY=`tty`
  export GTK2_RC_FILES=$HOME/.gtkrc-2.0
  export BROWSER=my-eye-into-the-world
  export COLORTERM=truecolor
  export TERMINAL=wezterm
  if [[ $TERMINAL =~ 'alacritty' ]]; then
    export TERM_OPT=
    export TERM_TITLE='--title'
    export TERM_NAME='--class'
    export TERM_CMD='--command'
  elif [[ $TERMINAL == 'kitty' ]]; then
    export TERM_OPT=
    export TERM_TITLE='--title'
    export TERM_NAME='--class'
    export TERM_CMD=''
  elif [[ $TERMINAL =~ 'wezterm' ]]; then
    export TERM_OPT='start'
    export TERM_TITLE='--class'
    export TERM_NAME='--class'
    export TERM_CMD=''
  else
    export TERM_TITLE='-title'
    export TERM_NAME='-name'
    export TERM_CMD='-e'
  fi

  export XDG_RUNTIME_DIR=/tmp/${UID}-runtime-dir
  if test -z ${XDG_RUNTIME_DIR}; then
    export XDG_RUNTIME_DIR=/tmp/${UID}-runtime-dir
    if ! test -d ${XDG_RUNTIME_DIR}; then
      mkdir ${XDG_RUNTIME_DIR}
      chmod 0700 ${XDG_RUNTIME_DIR}
    fi
  fi
  # }}}3
  # - Aliases {{{3
  alias ta='tmux attach -d -t'
  ## read private aliases
  if [[ -s $ZDOTDIR/zsh_aliases ]]; then
    source $ZDOTDIR/zsh_aliases
  fi
  # }}}3
  # - Functions # {{{3
  function sync-music()
  {
    if [[ $# -le 0 ]]; then
      echo "Usage: $0 <host>";
      return 1;
    fi

    if (( $# != 1 )); then
      echo "And please just one host at a time ;-)"
      return 1
    else
      local mhost=$1
      echo "Syncing music with $mhost ..."
      rsync -avz --delete --exclude='.stfolder' /music/Tango/ $mhost:/music/Tango/
      rsync -avz --delete --exclude='.stfolder' /music/Non-Tango/ $mhost:/music/Non-Tango/
      echo "Syncing CDDB info with $mhost ..."
      rsync -avz /home/swimmer/.cddb/ $mhost:/home/swimmer/.cddb/
      echo "Syncing playlists with $mhost ..."
      rsync -avz --delete --exclude='.stfolder' /music/playlists/ $mhost:/music/playlists/
    fi
  }
  function sync-music-pretend()
  {
    if [[ $# -le 0 ]]; then
      echo "Usage: $0 <host>";
      return 1;
    fi

    if (( $# != 1 )); then
      echo "And please just one host at a time ;-)"
      return 1
    else
      local mhost=$1
      echo "Syncing music with $mhost ..."
      rsync -avzn --delete --exclude='.stfolder' /music/Tango/ $mhost:/music/Tango/
      rsync -avzn --delete --exclude='.stfolder' /music/Non-Tango/ $mhost:/music/Non-Tango/
      echo "Syncing CDDB info with $mhost ..."
      rsync -avzn /home/swimmer/.cddb/ $mhost:/home/swimmer/.cddb/
      echo "Syncing playlists with $mhost ..."
      rsync -avzn --delete --exclude='.stfolder' /music/playlists/ $mhost:/music/playlists/
    fi
  }
  function flac2ogg()
  {
    find . -name '*flac' -exec oggenc -q 10 {} \;
  }
  function m4a2ogg()
  {
    for f in *.m4a; do ffmpeg -i '$f' -acodec libvorbis -aq 10 '${f%.m4a}.ogg'; done
  }
  function etail()
  {
    tail -n$1 /var/log/emerge.log | awk -F: '{print strftime("%a %F %T", $1),$2}'
  }
  function ta-locate()
  {
    artist=$1
    title=$2
    locate -d $HOME/Tango/ta-locate.db $artist | ug -i $title
  }
  # }}}3
  # + User config per host # {{{3
  # . swimmer # {{{4
  if [[ $HOST == swimmer ]]; then
    echo 'Loading host specific settings for swimmer ...'
    # Don't forget your tasks ;-)
    export TASKDDATA=/var/lib/taskd
    export TASKRC=$HOME/private/task/rc/taskrc
    # task

    # X related stuff
    export POLYBAR_HEIGHT=55

    # Key management
    eval `keychain --eval --agents gpg,ssh 451CEE7036BBF00C id_rsa`

    alias tcom='tmux start-server && tmux attach -d -t com'
    alias lp='lp -o media=A4 -o page-border=single'
    alias lp2='lp -o media=A4 -o number-up=2 -o page-border=single'
    alias lp4='lp -o media=A4 -o number-up=4 -o page-border=single'
    alias exif='exiftool -@ $HOME/system/fotografie/tags -s2'
    alias restart='rc-config restart'

    function sync-desktop()
    {
      if [[ $# -le 0 ]]; then
        echo "Usage: $0 '<host>' or '<host> <host>' or 'all'"
        return 1;
      fi

      function sync-dotfiles() {
      # dotfiles on github
        local host=$1
        echo "Syncing dotfiles on $host ..."
        rsync -az   --delete /home/swimmer/.dotfiles/ $host:.dotfiles/
      }

      function sync-x() {
      # terminal & X settings
        local host=$1
        echo "Syncing terminal & X settings on $host ..."
        rsync -az            /home/swimmer/.Xresources $host:
        rsync -az   --delete --exclude '.thumbs' --exclude '.xcf' /home/swimmer/system/wallpapers/ $host\:system/wallpapers/
        rsync -azK  --delete /usr/local/share/cursors/ $host:/usr/local/share/cursors/
        rsync -az   --delete /usr/local/share/icons/ $host:/usr/local/share/icons/
        rsync -azkL --delete /usr/local/share/themes/ $host:/usr/local/share/themes/
        rsync -azkL --delete /usr/share/fonts/owned/ $host:/usr/share/fonts/owned/
        rsync -az   --delete /home/swimmer/.config/libreoffice/4/user/template/ $host:.config/libreoffice/4/user/template/
        rsync -az            /home/swimmer/.gitconfig $host:
        rsync -az            /home/swimmer/.gtkrc-2.0 $host:
        rsync -az            /home/swimmer/.config/gtk-3.0/ $host:.config/gtk-3.0/
        rsync -az            /home/swimmer/.config/fontconfig/fonts.conf $host:.config/fontconfig/
        rsync -az            /home/swimmer/.config/Trolltech.conf $host:.config/
        rsync -azkL --delete /home/swimmer/.config/colours/ $host:.config/colours/
        rsync -az            /home/swimmer/.config/lazygit/config.yml $host:.config/lazygit/
        rsync -azKl --delete /home/swimmer/.config/alacritty/ $host:.config/alacritty/
        rsync -az   --delete /home/swimmer/.config/dunst/ $host:.config/dunst/
        rsync -az   --delete /home/swimmer/.config/awesome/ $host:.config/awesome/
        rsync -az   --delete /home/swimmer/.config/herbstluftwm/ $host:.config/herbstluftwm/
        rsync -azKl --delete /home/swimmer/.config/kitty/ $host:.config/kitty/
        rsync -az   --delete /home/swimmer/.config/picom/ $host:.config/picom/
        rsync -az   --delete /home/swimmer/.config/polybar/ $host:.config/polybar/
        rsync -azKl --delete /home/swimmer/.config/rofi/ $host:.config/rofi/
        rsync -az   --delete /home/swimmer/.config/sxhkd/ $host:.config/sxhkd/
        rsync -az   --delete /home/swimmer/.config/wezterm/ $host:.config/wezterm/
        for j in strip-ansi-escapes sync-color-schemes wezterm{,-gui,-mux-server}; rsync -azL --delete /home/swimmer/.local/bin/$j $host:.local/bin/
        rsync -az            /home/swimmer/.config/emoji-list.txt $host:.config/
        rsync -az            /usr/local/bin/bg-toggle $host:/usr/local/bin/
      }
      function sync-cli() {
      # zsh, vim, mc
        local host=$1
        echo "Syncing zsh on $host ..."
        rsync -az   --delete /home/swimmer/.config/fzf/fzf.*sh $host:.config/fzf/
        rsync -az   --delete /home/swimmer/.config/zsh/external/ $host:.config/zsh/external/
        rsync -az            /home/swimmer/.config/zsh/zsh_aliases $host:.config/zsh/zsh_aliases
        rsync -az            /home/swimmer/.config/zsh/.zshrc $host:.config/zsh/.zshrc
        echo "Syncing vim & neovim on $host ..."
        rsync -az            /home/swimmer/.vimrc $host:
        rsync -azk  --delete /home/swimmer/.vim/ $host:.vim/
        rsync -azK  --delete /home/swimmer/.config/nvim/ $host:.config/nvim/
        echo "Syncing bat on $host ..."
        rsync -az            /home/swimmer/.config/bat/ $host:.config/bat/
        echo "Syncing file explorers on $host ..."
        rsync -az            /home/swimmer/.config/mc/ini $host:.config/mc/
        rsync -az            /home/swimmer/.config/mc/mc.ext $host:.config/mc/
        rsync -az   --delete /home/swimmer/.local/share/mc/skins/ $host:.local/share/mc/skins/
        rsync -az   --delete /home/swimmer/.config/vifm/vifmrc $host:.config/vifm/vifmrc
        rsync -az   --delete /home/swimmer/.config/vifm/colors/ $host:.config/vifm/colors/
        echo "Syncing cli browsers on $host ..."
        rsync -az            /home/swimmer/.w3m/config $host:.w3m/config
        rsync -az            /home/swimmer/.elinks/elinks.conf $host:.elinks/elinks.conf
        echo "Syncing moc themes on $host ..."
        rsync -azk  --delete /home/swimmer/.moc/themes/ $host:.moc/themes/
      }
      function sync-misc() {
      # diverse
        local host=$1
      }

      for i in "$@"; do
        case $i in
          (komala)
            echo "<< $i >>"
            if ping -c1 $i > /dev/null; then
              sync-dotfiles $i
              sync-x $i
              sync-cli $i
            else
              echo "$i is down"
            fi
            ;;
          (tj)
            echo "<< $i >>"
            if ping -c1 $i > /dev/null; then
              sync-dotfiles $i
              sync-x $i
              sync-cli $i
            else
              echo "$i is down"
            fi
            ;;
          (all)
            for h in komala tj; do
              echo "<< $h >>"
              if ping -c1 $h > /dev/null; then
                sync-dotfiles $h
                sync-x $h
                sync-cli $h
              else
                echo "$h is down"
              fi
            done
            ;;
          (*)
            echo
            echo "<< $i >>"
            echo "Unknown host. Please proceed ..."
            ;;
        esac
      done
    }

    function scan() {
      scanimage -p --mode Color --format=tiff
    }

  fi
  # }}}4
  # . tj # {{{4
  if [[ $HOST == tj ]]; then
    echo "Loading host specific settings for $HOST ..."

    # X related stuff
    export POLYBAR_HEIGHT=35

    # Key management
    eval `keychain --eval --agents gpg,ssh 451CEE7036BBF00C id_rsa`

    alias tj='tmux start-server && tmux attach -d -t tj'
    alias tj-ncmpcpp='ncmpcpp -p 6601 -c $HOME/.ncmpcpp/tj-config'
    alias prelisten-ncmpcpp='ncmpcpp -p 6602 -c $HOME/.ncmpcpp/prelisten-config'
    alias hdmi-mplayer='mplayer -ao alsa:device=hdmi'
    alias hdmi-vlc='vlc --alsa-audio-device=hdmi'
    alias exif='exiftool -@ $HOME/system/tags $@'
  fi
  # }}}4
  # . komala # {{{4
  if [[ $HOST == komala ]]; then
    echo "Loading host specific settings for $HOST ..."

    # Key management
    eval `keychain --eval --agents ssh id_rsa`

  fi
  # }}}4
  # }}}3
  # }}}2
# * Root config # {{{2
else
  echo "Initializing user settings for $USER ..."
  # - Prompt # {{{3
  PROMPT='$bold$colorfg{blue}$mytime$uncolorfg [$colorfg{red}$username@$colorfg{green}$hostname$uncolorfg:$unbold$curdir$bold] $colorfg{red}$rootorwhat $uncolorfg$unbold'
  # }}}3
  # - Exports # {{{3
  path=($HOME/bin $HOME/.local/bin $path)
  # }}}3
  # - Key management # {{{3
  eval `keychain --eval --agents ssh`
  # }}}3
  # - Aliases # {{{3
  alias mess='multitail -Z red,black,inverse -T -x "%m %u@%h %f (%t) [%l]" -m 0 -wh 12 -n 70 -f -cS syslog "/var/log/sshd" -m 0 -n 70 -f -cS syslog "/var/log/mail" -m 0 -n 70 -f -cS syslog -ev "---- MARK ----" "/var/log/messages"'
  alias fire='tail -f /var/log/shorewall.log | fwfilter'
  alias fwlogwatch='fwlogwatch -Ddys'
  alias eva='emerge -va'
  alias epre='emerge -va @preserved-rebuild'
  alias emod='emerge @module-rebuild'
  alias restart='rc-config restart'
  alias ta='tmux attach -d'
  ## read private aliases
  if [[ -s $HOME/.zsh/zsh_aliases ]]; then
    source $HOME/.zsh/zsh_aliases
  fi
  # }}}3
  # - Functions # {{{3
  function all-update ()
  {
     rkhunter --propupd
     eclean-dist -d
     eclean-pkg
     env-update
     exec zsh
  }
  function fc() {
    OPT=$1
    shift
    case $OPT in
    (e*)
      eselect fontconfig enable $@
      ;;
    (d*)
      eselect fontconfig disable $@
      ;;
    (l*)
      eselect fontconfig list
      ;;
    esac
  }
  function installs() {
      PACKAGE=$1
      emerge $PACKAGE -p --color n|grep ebuild|awk '{print $4}' >> ${HOME}/system/installs/$PACKAGE
  }
  # }}}3
  # + Root config per host # {{{3
  # . swimmer # {{{4
  if [[ $HOST == swimmer ]]; then
    echo "Loading host specific settings for $HOST ..."
  fi
  # }}}4
  # . tj # {{{4
  if [[ $HOST == tj ]]; then
    echo "Loading host specific settings for $HOST ..."
  fi
  # }}}4
  # . komala # {{{4
  if [[ $HOST == komala ]]; then
    echo "Loading host specific settings for $HOST ..."
  fi
  # }}}4
fi
# }}}3
# }}}2
# END user config # }}}1
# External modules # {{{1
if type fasd &> /dev/null; then
  eval "$(fasd --init auto)"
fi
[ -f $ZDOTDIR/external/fzf-extras.git/fzf-extras.sh ] && source $ZDOTDIR/external/fzf-extras.git/fzf-extras.sh
[ -f $ZDOTDIR/external/fzf-extras.git/fzf-extras.zsh ] && source $ZDOTDIR/external/fzf-extras.git/fzf-extras.zsh
[ -f $ZDOTDIR/external/fzf-marks.git/fzf-marks.plugin.zsh ] && source $ZDOTDIR/external/fzf-marks.git/fzf-marks.plugin.zsh
[ -f $ZDOTDIR/external/forgit.git/forgit.plugin.zsh ] && source $ZDOTDIR/external/forgit.git/forgit.plugin.zsh
if [[ -f $ZDOTDIR/external/zsh-autosuggestions.git/zsh-autosuggestions.zsh ]]; then
  zmodload zsh/zpty
  source $ZDOTDIR/external/zsh-autosuggestions.git/zsh-autosuggestions.zsh
  export ZSH_AUTOSUGGEST_STRATEGY=(history completion)
  export ZSH_AUTOSUGGEST_USE_ASYNC=1
fi
if [[ -f $ZDOTDIR/external/zsh-syntax-highlighting.git/zsh-syntax-highlighting.zsh ]]; then
  source $ZDOTDIR/external/zsh-syntax-highlighting.git/zsh-syntax-highlighting.zsh
  export ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets )
fi
# Kitty configuration
## Shell integration
if [[ -n $KITTY_INSTALLATION_DIR ]]; then
  export KITTY_SHELL_INTEGRATION=enabled
  autoload -Uz -- $KITTY_INSTALLATION_DIR/shell-integration/zsh/kitty-integration
  kitty-integration
  unfunction kitty-integration
fi
# }}}1

[ -f "${XDG_CONFIG_HOME:-$HOME/.config}"/fzf/fzf.zsh ] && source "${XDG_CONFIG_HOME:-$HOME/.config}"/fzf/fzf.zsh
