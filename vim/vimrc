" Just a few settings
" Check settings with ":verbose set <setting>?"
" vim: fdm=marker fdl=0 tw=200

let mapleader = "\<Space>"

" {{{1 Plugins
" {{{2 Packager plugin install
function! PackagerInit() abort
  packadd vim-packager
  call packager#init()
  call packager#add('kristijanhusak/vim-packager', { 'type': 'opt' })
  call packager#add('tpope/vim-abolish')
  call packager#add('tpope/vim-eunuch')
  call packager#add('tpope/vim-obsession')
  call packager#add('tpope/vim-repeat')
  call packager#add('tpope/vim-fugitive')
  call packager#add('rbong/vim-flog')
  call packager#add('junegunn/fzf', { 'do': './install --all && ln -sf $(pwd) ~/.fzf'})
  call packager#add('junegunn/fzf.vim')
  call packager#add('junegunn/vim-peekaboo')
  call packager#add('junegunn/goyo.vim', { 'type': 'opt' })
  call packager#add('junegunn/limelight.vim', { 'type': 'opt'})
  call packager#add('machakann/vim-sandwich')
  call packager#add('justinmk/vim-sneak')
  call packager#add('lambdalisue/vim-gista')
  call packager#add('mhinz/vim-signify')
  call packager#add('mhinz/vim-sayonara')
  call packager#add('mhinz/vim-grepper')
  call packager#add('romainl/vim-qf')
  call packager#add('romainl/vim-qlist')
  call packager#add('lifepillar/vim-mucomplete')
  call packager#add('wellle/tmux-complete.vim')
  call packager#add('preservim/nerdcommenter')
  call packager#add('mbbill/undotree', { 'type': 'opt' })
  call packager#add('fcpg/vim-spotlightify')
  call packager#add('markonm/traces.vim')
  call packager#add('andymass/vim-matchup')
  call packager#add('mg979/vim-visual-multi')
  call packager#add('brooth/far.vim')
  call packager#add('qpkorr/vim-renamer')
  call packager#add('will133/vim-dirdiff')
  call packager#add('vim-voom/VOoM')
  call packager#add('rkitover/vimpager')
  call packager#add('godlygeek/tabular')
  call packager#add('dhruvasagar/vim-table-mode')
  call packager#add('jamessan/vim-gnupg')
  call packager#add('habamax/vim-asciidoctor')
  call packager#add('cespare/vim-toml')
  call packager#add('MTDL9/vim-log-highlighting')
  call packager#add('vim-scripts/SyntaxAttr.vim')
  call packager#add('vim-scripts/visSum.vim')
  call packager#add('chrisbra/unicode.vim')
  call packager#add('gu-fan/colorv.vim', { 'type': 'opt'})
  call packager#add('RRethy/vim-hexokinase', { 'do': 'make hexokinase' })
  call packager#add('lifepillar/vim-colortemplate')
  call packager#add('wimstefan/vim-artesanal')
  call packager#add('romainl/Apprentice')
  call packager#add('rakr/vim-one')

endfunction
" Packager plugin install }}}
" {{{2 Packager plugin settings
" {{{3 vim-obsession config
  nnoremap <silent> ,to                  :Obsession<CR>
" }}}
" {{{3 git related config
  nnoremap          <Leader>gc           :<C-u>Gcommit -v %<CR>
  nnoremap          <Leader>gd           :<C-u>Gdiff<CR>
  nnoremap          <Leader>gl           :<C-u>0Glog<CR>
  nnoremap          <Leader>gp           :<C-u>Gpush<CR>
  nnoremap          <Leader>gs           :<C-u>Gstatus<CR>
" }}}
" {{{3 fzf.vim config
  function! s:build_quickfix_list(lines)
    call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
    copen
    cc
  endfunction

  autocmd VimEnter * command! Colors call fzf#vim#colors({'left': '20%'})
  command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(
    \   <q-args>,
    \   <bang>0 ? fzf#vim#with_preview('right:60%')
    \           : fzf#vim#with_preview('right:70%:hidden', '?'),
    \   <bang>0)
  command! -bang -nargs=* Rg
    \ call fzf#vim#grep(
    \   'rg --vimgrep --color=always '.shellescape(<q-args>), 1,
    \   <bang>0 ? fzf#vim#with_preview('right:60%')
    \           : fzf#vim#with_preview('right:70%:hidden', '?'),
    \   <bang>0)
  nnoremap          <Leader>b            :Buffers<CR>
  nnoremap          <Leader>c            :Colors<CR>
  nnoremap          <Leader>h            :Helptags<CR>
  nnoremap          <Leader>p            :Files<CR>
  nnoremap          <Leader>fb           :BTags<CR>
  nnoremap          <Leader>fh           :History<CR>
  nnoremap          <Leader>fm           :Maps<CR>
  nnoremap          <Leader>fr           :Rg<Space>
  nnoremap          <Leader>fl           :Locate<Space>
  nnoremap          <Leader>ft           :Tags<CR>
  imap              <C-x><C-j>           <plug>(fzf-complete-file-ag)
  imap              <C-x><C-l>           <plug>(fzf-complete-line)

  let g:fzf_buffers_jump               = 1
  let g:fzf_action                     = {
                                        \ 'ctrl-q': function('s:build_quickfix_list'),
                                        \ 'ctrl-t': 'tab split',
                                        \ 'ctrl-x': 'split',
                                        \ 'ctrl-v': 'vsplit' }
  let g:fzf_layout                     = { 'up': '40%' }
  " let g:fzf_layout                     = { 'window': { 'width': 0.9, 'height': 0.6 } }
" }}}
" {{{3 vim-peekaboo config
  let g:peekaboo_ins_prefix            = '<C-x>'
" }}}
" {{{3 goyo.vim config
  let g:goyo_width                     = 114
  nnoremap <silent> ,tg                  :packadd goyo.vim<BAR>Goyo<CR>
" }}}
" {{{3 limelight.vim config
  let g:limelight_default_coefficient  = 0.7
  nnoremap <silent> ,tl                  :packadd limelight.vim<BAR>Limelight!!<CR>
" }}}
" {{{3 vim-sneak config
  let g:sneak#prompt                   = '[sneak] '
  let g:sneak#label                    = 1
  let g:sneak#s_next                   = 1
  nmap              f                    <Plug>Sneak_f
  nmap              F                    <Plug>Sneak_F
  xmap              f                    <Plug>Sneak_f
  xmap              F                    <Plug>Sneak_F
  omap              f                    <Plug>Sneak_f
  omap              F                    <Plug>Sneak_F
  nmap              t                    <Plug>Sneak_t
  nmap              T                    <Plug>Sneak_T
  xmap              t                    <Plug>Sneak_t
  xmap              T                    <Plug>Sneak_T
  omap              t                    <Plug>Sneak_t
  omap              T                    <Plug>Sneak_T
  nmap              s                    <Plug>Sneak_s
  nmap              S                    <Plug>Sneak_S
  xmap              s                    <Plug>Sneak_s
  xmap              S                    <Plug>Sneak_S
  omap              s                    <Plug>Sneak_s
  omap              S                    <Plug>Sneak_S
" }}}
" {{{3 vim-signify config
  let g:signify_sign_add               = '+'
  let g:signify_sign_change            = '!'
  let g:signify_sign_delete            = '-'
  let g:signify_sign_delete_first_line = 'â€¾'
  let g:signify_line_highlight         = 0
  let g:signify_update_on_focusgained  = 1
  nnoremap          ,st                 :SignifyToggle<CR>
  nnoremap          ,sh                 :SignifyToggleHighlight<CR>
  nnoremap          ,sd                 :SignifyDiff<CR>
  nnoremap          ,sp                 :SignifyDiffPreview<CR>
" }}}
" {{{3 vim-grepper config
  nmap              gs                   <plug>(GrepperOperator)
  xmap              gs                   <plug>(GrepperOperator)
  nnoremap          <Leader>g            :Grepper<CR>
  nnoremap          <Leader>*            :Grepper -cword -noprompt<cr>
  let g:grepper                        = {}
  let g:grepper.tools                  = ['rg', 'ag', 'ack', 'grep', 'findstr', 'pt']
  let g:grepper.next_tool              = '<Leader>g'
" }}}
" {{{3 vim-qf config
  let g:qf_mapping_ack_style           = 1
  let g:qf_auto_open_quickfix          = 0
  nmap              <C-q>                <Plug>QfSwitch
  nmap              <C-c>                <Plug>QfCtoggle
  nmap              <C-l>                <Plug>QfLtoggle
  nmap              <Home>               <Plug>QfCprevious
  nmap              <End>                <Plug>QfCnext
  nmap              <C-Home>             <Plug>QfLprevious
  nmap              <C-End>              <Plug>QfLnext
" }}}
" {{{3 vim-mucomplete config
  let g:mucomplete#chains              = {}
  let g:mucomplete#chains              = {
                                        \ 'default':    ['path', 'keyn', 'omni', 'user', 'defs', 'incl', 'c-n', 'uspl'],
                                        \ 'vim':        ['path', 'keyn', 'cmd',  'omni', 'user', 'c-n', 'uspl'],
                                        \ 'gitcommit':  ['path', 'c-n',  'uspl', 'omni', 'user'],
                                        \ 'mail':       ['path', 'c-n',  'uspl', 'omni', 'user'],
                                        \ 'markdown':   ['path', 'c-n',  'uspl', 'omni', 'user'],
                                        \ 'text':       ['path', 'c-n',  'uspl', 'omni', 'user']
                                        \ }
  let g:mucomplete#can_complete         = {}
  let g:mucomplete#can_complete.default = {
                                          \ 'keyn': { t -> t =~# '\v\k{3,}$' },
                                          \ 'c-n':  { t -> t =~# '\v\k{3,}$' },
                                          \ 'uspl': { t -> t =~# '\v\k{4,}$' && &l:spell && !empty(&l:spelllang) },
                                          \ }
  nnoremap <silent> ,ta                  :MUcompleteAutoToggle<CR>
  imap     <expr>   <right>              mucomplete#extend_fwd("\<right>")
" }}}
" {{{3 nerdcommenter config
  let NERDSpaceDelims                  = 1
  let NERDCreateDefaultMappings        = 0
  map               gcc                  <Plug>NERDCommenterToggle
  map               gcu                  <Plug>NERDCommenterUncomment
  map               gcl                  <Plug>NERDCommenterAlignLeft
  map               gcb                  <Plug>NERDCommenterAlignBoth
  map               gca                  <Plug>NERDCommenterAltDelims
  map               gcm                  <Plug>NERDCommenterMinimal
  map               gcn                  <Plug>NERDCommenterNested
  map               gci                  <Plug>NERDCommenterInvert
  map               gcA                  <Plug>NERDCommenterAppend
  map               gc$                  <Plug>NERDCommenterToEOL
  map               gcy                  <Plug>NERDCommenterYank
  map               gcs                  <Plug>NERDCommenterSexy
" }}}
" {{{3 undotree config
  let g:undotree_WindowLayout          = 2
  let g:undotree_SetFocusWhenToggle    = 1
  let g:undotree_ShortIndicators       = 1
  nnoremap <silent> ,tu                  :packadd undotree<BAR>UndotreeToggle<CR>
" }}}
" {{{3 vim-dirdiff config
  let g:DirDiffExcludes                = ".git,.svn,CVS,*.class,*.exe,.*.swp,*.pyc,*.so,*.png,*.jp*g,*.svg,*.tiff"
" }}}
" {{{3 vim-visual-multi config
  let g:VM_verbose_commands            = 1
" }}}
" {{{3 VOoM config
  let g:voom_tree_width                = 40
  let g:voom_default_mode              = 'fmr3'
  let g:voom_ft_modes                  = {'adoc': 'asciidoc', 'asciidoc': 'asciidoc', 'asciidoctor': 'asciidoc', 'markdown': 'markdown', 'md': 'markdown', 'rst': 'rest', 'tex': 'latex'}
  nnoremap          ,tv                  :VoomToggle<CR>
" }}}
" {{{3 vimpager config
  if exists('g:vimpager.enabled')
    let g:vimpager                     = {}
    let g:less                         = {}
    let g:less.enabled                 = 0
    set nolist
  endif
" }}}"
" {{{3 tabular config
  nnoremap          <Leader><Tab>        :Tabularize<Space>
  vnoremap          <Leader><Tab>        :Tabularize<Space>
" }}}
" {{{3 vim-table-mode config
  let g:table_mode_auto_align          = 1
" }}}
" {{{3 asciidoctor config
  let g:asciidoctor_folding            = 1
  let g:asciidoctor_syntax_indented    = 1
  let g:asciidoctor_syntax_conceal     = 1
" }}}
" {{{3 SyntaxAttr.vim config
  nnoremap          <F12>                :call SyntaxAttr()<CR>
" }}}
" {{{3 unicode.vim config
  let g:Unicode_ShowPreviewWindow      = 0
  nnoremap          <Leader>ut           :UnicodeTable<CR>
  nnoremap          ga                   :UnicodeName<CR>
" }}}
" {{{3 colorv config
  nnoremap <silent> ,tcp                 :packadd colorv.vim<BAR>ColorVPreview<CR>
" }}}
" {{{3 vim-hexokinase config
  let g:Hexokinase_highlighters        = [ 'foregroundfull', 'backgroundfull' ]
  let g:Hexokinase_optInPatterns       = 'full_hex,triple_hex,rgb,rgba,hsl,hsla,colour_names'
" }}}
" {{{3 vim-colortemplate config
  let g:colortemplate_no_stat          =  0
  let g:colortemplate_no_warnings      =  0
" }}}
" {{{3 vim-artesanal config
  let g:artesanal_dimmed               = 0
  let g:artesanal_transparent          = 0
" }}}
" vim-one config {{{3
  let g:one_allow_italics              = 1
" }}}
" Packager plugin settings }}}
" {{{2 Packager plugin comands
command! PackagerInstall call PackagerInit() | call packager#install()
command! -bang PackagerUpdate call PackagerInit() | call packager#update({ 'force_hooks': '<bang>' })
command! PackagerClean call PackagerInit() | call packager#clean()
command! PackagerStatus call PackagerInit() | call packager#status()
nnoremap ,pc :PackagerClean<CR>
nnoremap ,pi :PackagerInstall<CR>
nnoremap ,ps :PackagerStatus<CR>
nnoremap ,pu :PackagerUpdate<CR>
" Packager plugin comands }}}
" Plugins }}}

" {{{1 General Settings
filetype indent plugin on
syntax   on
runtime  ftplugin/man.vim

set backspace=indent,eol,start         " allow backspacing over everything in insert mode
set shiftwidth=2                       " number of spaces used for indention
let &softtabstop = &shiftwidth         " number of spaces that a <Tab> counts for
set shiftround                         " round indent to multiple of 'shiftwidth'
set expandtab                          " use spaces to insert a <Tab>
set smarttab                           " smart tab handling for indenting
set autoindent                         " set autoindenting on
set selection=exclusive                " defines the behaviour of the selection

" backup settings - kudos to https://begriffs.com/posts/2019-07-19-history-use-vim.html
" protect changes between writes
set swapfile
" patch required to honor double slash at end
if has("patch-8.1.0251")
  if !isdirectory(expand("~/.cache/vim/swap/"))
    call mkdir(expand("~/.cache/vim/swap/"), "p", "0700")
  end
  set directory^=~/.cache/vim/swap//
end
" protect against crash-during-write
set writebackup
" but do not persist backup after successful write
set nobackup
" use rename-and-write-new method whenever safe
set backupcopy=auto
" patch required to honor double slash at end
if has("patch-8.1.0251")
  if !isdirectory(expand("~/.cache/vim/backup/"))
    call mkdir(expand("~/.cache/vim/backup/"), "p", "0700")
  end
  set backupdir^=~/.cache/vim/backup//
end
" persist the undo tree for each file
set undofile
set undolevels=5000
" patch required to honor double slash at end
if has("patch-8.1.0251")
  if !isdirectory(expand("~/.cache/vim/undo/"))
    call mkdir(expand("~/.cache/vim/undo/"), "p", "0700")
  end
  set undodir^=~/.cache/vim/undo//
end
set hidden                             " allow buffers to go in background without saving etc.
set autowrite                          " save automatically before critical operations
set autoread                           " automatically reads & loads changes

"set viminfo='50,\"100,:100,%          " read/write a viminfo file with buffer list
set viminfo='50,\"100,:100             " read/write a viminfo file without buffer list
if has ('nvim')
  if !isdirectory(expand("~/.cache/nvim/"))
    call mkdir(expand("~/.cache/nvim/"), "p", "0700")
  end
  set viminfo+=n~/.cache/nvim/viminfo " specify where to write the viminfo
else
  if !isdirectory(expand("~/.cache/vim/"))
    call mkdir(expand("~/.cache/vim/"), "p", "0700")
  end
  set viminfo+=n~/.cache/vim/viminfo " specify where to write the viminfo
endif
set history=100                        " keep 100 lines of command line history

set updatetime=300                     " make things snappier
set number relativenumber              " show line numbers
set cursorcolumn                       " highlights the screen column of the cursor
set cursorline                         " highlights the screen line of the cursor
let &cc='+'.join(range(1,255),',+')    " highlights textwidth boundaries

" virtually wrap lines to fit on the screen
if exists('+linebreak')
  set linebreak showbreak=\ Â»\       " break & visually mark wrapped lines
endif
if has('patch594')
  set breakindent                      " keep indentation of wrapped lines
endif

set ignorecase                         " ignore case when using a search pattern
set smartcase                          " override 'ignorecase' when pattern has upper case characters
set incsearch                          " show matches while typing the query
set hlsearch                           " highlight search results

set list                               " display unprintable characters
set listchars=tab:â€º\ ,trail:Â·,eol:Â«,extends:>,precedes:<

set path=.,**                          " list of directories which will be searched with find et al
set isfname=@,48-57,/,.,-,_,+,,,#,$,%,~,=,(,),[,],{,}     " allowed characters in file and path names

set wildmenu                           " use a scrollable menu for filename completions
set wildchar=<tab>                     " the char used for 'expansion' on the command line
set wildmode=list:full                 " show list of completions and complete as much as possible, then iterate full completions
set wildignore+=*.swp,*.bak,*.pyc,*.cache,*.dll,*.pdb,*.tar.*,*.png,*.jpg,*.gif
set wildignore+=*/.git/**/*,*/.hg/**/*,*/.svn/**/*
set wildignorecase                     " ignore case in file name and directory completion

set modeline                           " allow the execution of modelines
set showmode                           " shows mode
set showcmd                            " show uncompleted command
set showmatch                          " show matching hyphens
set diffopt+=vertical                  " split vertical
if has("patch-8.1.0360")               " make use of better algorithms if available
  set diffopt+=indent-heuristic,algorithm:histogram
endif
set splitright                         " set vertical splits to split to the right
set splitbelow                         " set horizontal splits to split to the bottom
set previewheight=24                   " set the height of the preview window
set scrolloff=4                        " minimal number of screen lines to keep above and below the cursor

set gdefault                           " always use global substitutions

" Help settings
set keywordprg=:help
nnoremap          <Leader>M            :Man<Space>
augroup help
  autocmd!
  autocmd WinNew * let w:new = 1
  autocmd FileType help,man if exists('w:new') | unlet w:new | wincmd L | vertical resize 84 | endif
augroup END

" Clipboard settings
set clipboard+=unnamed                 " yank+paste with the '*' register

" Mouse settings
set mouse=a                            " enable mouse everywhere
set mousemodel=popup_setpos

" Completion settings
set complete-=i                        " included files
set complete-=t                        " tags
set complete+=kspell                   " currently active spell checking
set dictionary+=spell
" ins-completion-menu options
set completeopt+=menuone
set completeopt+=noinsert
set completeopt+=noselect
if has('patch-8.1.1880')
  set completeopt-=preview
  set completeopt+=popup
endif
set infercase                          " case of the match is adjusted depending on the typed text

" Fold settings
set foldenable                         " turn on folding
set foldmethod=indent                  " fold on indentation (only use marker if explicitly defined)
set foldlevel=100                      " don't autofold anything (but I can still fold manually)

" Search settings
if executable('rg')
  set grepprg=rg\ --vimgrep\ --no-heading
  set grepformat=%f:%l:%c:%m
elseif executable('ag')
  set grepprg=ag\ --vimgrep
  set grepformat=%f:%l:%c:%m
elseif executable('ack')
  set grepprg=ack\ --nogroup\ --column\ --smart-case\ --nocolor\ --follow\ $*
  set grepformat=%f:%l:%c:%m
endif

" Spell settings
set spelllang=nl,en,de,es
set spellfile=~/.vim/spell/myspell.utf-8.add
if $USER=='root'
  set nospell
else
  set nospell
endif

" Print settings
set printoptions=paper:A4,header:0

" Netrw settings
let g:netrw_winsize                    = 20
let g:netrw_banner                     =  0
let g:netrw_liststyle                  =  3
let g:netrw_preview                    =  0
let g:netrw_alto                       =  0
nnoremap <silent> <Leader>x              :Lexplore<CR>

" General Settings }}}

" {{{1 Visual
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
if !has('nvim')                        " enable under{line,curl}
  set term=xterm-256color
  set t_Cs =
endif
set termguicolors
if has('gui_running')
  if $USER=='root'
    color apprentice
  else
    if filereadable(expand("~/.config/vim_theme"))
      source ~/.config/vim_theme
    else
      color default
    endif
  endif
else
  if $USER=='root'
    if filereadable(expand("~/.config/vim_theme"))
      source ~/.config/vim_theme
    else
      color apprentice
    endif
  else
    if filereadable(expand("~/.config/vim_theme"))
      source ~/.config/vim_theme
    else
      color default
    endif
  endif
endif

if has('gui_running')
  set guifont=Iosevka\ Artesanal\ Tailed\ weight=453\ 12
  set guioptions-=T                    " disable toolbar
  set guioptions-=l                    " disable left scrollbar
  set guioptions-=L
  set guioptions-=r                    " disable right scrollbar
  set guioptions-=R
  set guioptions-=e                    " disables the GUI tab line in favor of the plain text version
endif

" {{{2 Statusline
set laststatus=2                       " always show the statusline

function! MyStatusline()
  let stl  = ''
  if $USER == 'root'
    let stl .= '%#Status1# â–   '
  else
    let stl .= ' â–   '
  endif
  if mode() ==? 'i'
    let stl .= '%#Mode1# %f %*'
  elseif mode() ==? 'R'
    let stl .= '%#Mode2# %f %*'
  elseif mode() =~? '[sSvV]'
    let stl .= '%#Mode3# %f %*'
  elseif mode() ==? 'c'
    let stl .= '%#Mode4# %f %*'
  else
    let stl .= '%1* %f %*'
  endif
  if $USER=='root'
    let stl .= '%#Status1# â–   %*'
  else
    let stl .= ' â–   %*'
  endif
  let stl .= '%#Status2#%{&modified ? "Â âœ“Â " : ""}%*'
  let stl .= '%#Status1#%{&ro ? "Â âœ—Â " : ""}%*'
  if exists('g:loaded_obsession')
    let stl .= '%{ObsessionStatus("Â \\o/", "Â _o_")}'
  endif
  let stl .= '%= '
  if &filetype != 'help'
    if exists('g:loaded_mucomplete') && winwidth(0) > 70
      let stl .= '%{MU()} â”ƒ '
    endif
    if exists('b:git_dir') && winwidth(0) > 70
      let branch = fugitive#head(8)
      let stl .= (branch == 'master') ? 'master' : branch
      if exists('g:loaded_signify')
        let stl .= s:sy_stats_wrapper().' '
      endif
      let stl .= 'â”ƒ '
    endif
  endif
  let stl .= '%q%w%y'
  if winwidth(0) > 70
    if &fileformat != 'unix'
      let stl .= ' %{&encoding} [%{&fileformat}] '
    else
      let stl .= ' %{&encoding} '
    endif
  endif
  let stl .= '%p%% '
  let stl .= '%1* %l:%-2c %*'
  return stl
  call User_highlights()
endfunction
setlocal statusline=%!MyStatusline()
" Statusline }}}
" {{{2 Tabline
set showtabline=2                      " always show the tabline above

function! MyTabline()
  let s = ''
  let t = tabpagenr()
  let i = 1
  while i <= tabpagenr('$')
    let buflist = tabpagebuflist(i)
    let winnr = tabpagewinnr(i)
    let s .= '%' . i . 'T'
    let s .= (i == t ? '%1*' : '%2*')

    let s .= (i == t ? '%1*' : '%#TabNum#')
    let s .= ' ' . i . ' '
    let s .= (i == t ? '%#TabLineSel#' : '%#TabLine#')

    let bufnr = buflist[winnr - 1]
    let file = bufname(bufnr)
    let buftype = getbufvar(bufnr, '&buftype')
    if buftype == 'help'
      let file = 'help:' . fnamemodify(file, ':t:r')
    elseif buftype == 'quickfix'
      let file = 'quickfix'
    elseif buftype == 'nofile'
      if file =~ '\/.'
        let file = substitute(file, '.*\/\ze.', '', '')
      endif
    else
      " let file = pathshorten(fnamemodify(file, ':p:~:.'))
      if getbufvar(bufnr, '&modified')
        let file = file . ' Â±'
      endif
    endif
    if file == ''
      let file = '[No Name]'
    endif
    let s .= ' ' . file

    let nwins = tabpagewinnr(i, '$')
    if nwins > 1
      let modified = ''
      for b in buflist
        if getbufvar(b, '&modified') && b != bufnr
          let modified = '*'
          break
        endif
      endfor
      let hl = (i == t ? '%#WinNumSel#' : '%#WinNum#')
      let nohl = (i == t ? '%#TabLineSel#' : '%#TabLine#')
      " let s .= ' ' . modified . '(' . hl . winnr . nohl . '/' . nwins . ')'
      let s .= ' ' . modified . hl . winnr . nohl . '/' . nwins
    endif

    if i < tabpagenr('$')
      let s .= ' %#TabLine#|'
    else
      let s .= ' '
    endif

    let i = i + 1
  endwhile

  let s .= '%#User2#%T + %#TabLineFill#%='
  let s .= (tabpagenr('$') > 1 ? '%1*%999X x %*' : '%1* ^ %*')
  return s
endfunction
set tabline=%!MyTabline()
" Tabline }}}
" Visual }}}

" {{{1 Formatting
set comments=b:#,fb:-,fb:*,fb:o,:%,n:>|
set formatoptions=tcrqwnbj
set nrformats+=alpha
nnoremap Q gwap
vnoremap Q gw
" Formatting }}}

" {{{1 Key mappings & abbreviations

" open/source $MYVIMRC
nnoremap          <Leader>ev             :edit    $MYVIMRC<CR>
nnoremap          <Leader>sv             :source  $MYVIMRC<CR>

" editing
" replace the word under cursor globally
nnoremap          <Leader>@              :%s@\<<c-r><c-w>\>@@<left>
" jumping to a mark
nmap              <Leader>m              :marks<CR>
" pasting from a register
nmap              <Leader>r              :registers<CR>
" write files with sudo
command!                  W               w !sudo tee % > /dev/null

" files
nnoremap <silent> cd                     :<C-u>cd %:h \| pwd<CR>
nnoremap          <Leader>e              :e **/*<C-d>
nnoremap          <Leader>w              :w!<CR>
nnoremap          <Leader>wa             :wa!<CR>
nnoremap          <Leader>q              :q!<CR>
nnoremap          <Leader>qa             :qa!<CR>
nnoremap          <Leader>wqa            :wqa!<CR>

" windows
" move to the split in the direction shown, or create a new split
nnoremap <silent> <C-h>                  :call WinMove('h')<CR>
nnoremap <silent> <C-j>                  :call WinMove('j')<CR>
nnoremap <silent> <C-k>                  :call WinMove('k')<CR>
nnoremap <silent> <C-l>                  :call WinMove('l')<CR>
function! WinMove(key)
  let t:curwin = winnr()
  exec "wincmd ".a:key
  if (t:curwin == winnr())
    if (match(a:key,'[jk]'))
      wincmd v
    else
      wincmd s
    endif
    exec "wincmd ".a:key
  endif
endfunction

" buffers
nnoremap <silent> <Tab>                  :bnext<CR>
nnoremap <silent> <S-Tab>                :bprev<CR>
nnoremap          <Leader><Leader>        <c-^>                     " cycle between last two open buffers
nnoremap          <Leader>bd             :Sayonara<CR>

" tabs
nnoremap          <Leader>td             :tabclose<CR>

" terminals
nnoremap          <Leader>t              :terminal<CR>
nnoremap          <Leader>vt             :vertical terminal<CR>

" signatures
nnoremap          <Leader>sa 1G:s#\(Stefan Wimmer\) <.*>#\1 <stefan@tangoartisan.com>#<CR>
  \ G?--<CR>
  \ jVGd :r ~/.mutt/short-signature-artisan<CR>
  \ /^To:<CR>
nnoremap          <Leader>sg 1G:s#\(Stefan Wimmer\) <.*>#\1 <wimstefan@gmail.com>#<CR>
  \ G?--<CR>
  \ jVGd :r ~/.mutt/short-signature-gmail<CR>
  \ /^To:<CR>
nnoremap          <Leader>st G?--<CR>jVGd :r ~/.mutt/short-signature-tango<CR>
nnoremap          <Leader>ss G?--<CR>jVGd :r ~/.mutt/short-signature<CR>
nnoremap          <Leader>sl G?--<CR>jVGd :r ~/.mutt/signature<CR>

" some ideas stolen from tpope/vim-unimpaired
function! s:statusbump() abort
  let &l:readonly = &l:readonly
  return ''
endfunction

function! s:toggle(op) abort
  call s:statusbump()
  return eval('&'.a:op) ? 'no'.a:op : a:op
endfunction

function! s:option_map(letter, option, mode) abort
  exe 'nnoremap [o'.a:letter ':'.a:mode.' '.a:option.'<C-r>=<SID>statusbump()<CR><CR>'
  exe 'nnoremap ]o'.a:letter ':'.a:mode.' no'.a:option.'<C-r>=<SID>statusbump()<CR><CR>'
  exe 'nnoremap co'.a:letter ':'.a:mode.' <C-r>=<SID>toggle("'.a:option.'")<CR><CR>'
endfunction

nnoremap [ob :set background=light<CR>
nnoremap ]ob :set background=dark<CR>
nnoremap cob :set background=<C-r>=&background == 'dark' ? 'light' : 'dark'<CR><CR>
call s:option_map('c', 'cursorline', 'setlocal')
call s:option_map('u', 'cursorcolumn', 'setlocal')
nnoremap [od :diffthis<CR>
nnoremap ]od :diffoff<CR>
nnoremap cod :<C-r>=&diff ? 'diffoff' : 'diffthis'<CR><CR>
call s:option_map('h', 'hlsearch', 'set')
call s:option_map('i', 'ignorecase', 'set')
call s:option_map('l', 'list', 'setlocal')
call s:option_map('n', 'number', 'setlocal')
call s:option_map('r', 'relativenumber', 'setlocal')
call s:option_map('s', 'spell', 'setlocal')
call s:option_map('z', 'scrollbind', 'setlocal')
nnoremap [ox :set cursorline cursorcolumn<CR>
nnoremap ]ox :set nocursorline nocursorcolumn<CR>
nnoremap cox :set <C-r>=&cursorline && &cursorcolumn ? 'nocursorline nocursorcolumn' : 'cursorline cursorcolumn'<CR><CR>
nnoremap corn :set <C-r>=&number && &relativenumber ? 'nonumber norelativenumber' : 'number relativenumber'<CR><CR>
nnoremap com :<C-u>set colorcolumn=<C-R>=&colorcolumn == '+'.join(range(1,255),',+') ? '' : '+'.join(range(1,255),',+')<CR><CR><CR>
nnoremap [cl :highlight CursorLine cterm=bold,italic gui=bold,italic<CR>
nnoremap ]cl :highlight CursorLine cterm=none gui=none<CR>
nmap [<Space> O<Esc>j
nmap ]<Space> o<Esc>k

" various
set pastetoggle=<F3>

" Abbreviations
source ~/.vim/abbreviations.vim
" Keymappings & abbreviations }}}

" {{{1 Auto commands 
augroup vimrc
  autocmd!
  " Automatically chmod +x Shell and Perl scripts
  autocmd BufWritePost {*.sh,*.pl,*.py} silent !chmod +x %

  " Commentstrings
  autocmd FileType xdefaults setlocal commentstring=!\%s

  " mail specific configuration
  autocmd BufRead /tmp/mutt* silent! %s/^\([>|]\s\?\)\+/\=substitute(submatch(0), '\s', '', 'g').' '
  autocmd BufRead /tmp/mutt* set nonumber nohls nolist filetype=mail formatoptions=tcroqwln21
  autocmd BufRead /tmp/mutt* setlocal spell
  autocmd FileType mail setlocal commentstring=>\%s
  autocmd FileType mail setlocal wildignore-=*.tar.*,*.png,*.jpg,*.gif

  " Syntax for tmux
  autocmd BufNewFile,BufRead *tmux*conf* set filetype=tmux

  " Syntax for conkyrc
  autocmd BufNewFile,BufRead *conkyrc* set filetype=conkyrc

  " Syntax for htp files
  autocmd BufNewFile,BufRead {*.htp,*.htt} set filetype=xhtml

  " Syntax for xmp files
  autocmd BufNewFile,BufRead {*.xmp} set filetype=xml

  " Syntax for fvwm files
  autocmd BufNewFile,BufRead */.fvwm*/* set filetype=fvwm syntax=fvwm

  " Syntax for Xorg log files
  autocmd BufNewFile,BufRead *Xorg*log* set filetype=msmessages

  " Syntax for rofi themes
  autocmd BufNewFile,BufRead {*.rasi} set filetype=css

  " Change fileformat on playlist files (created by moc)
  autocmd BufNewFile,BufRead *.m3u set encoding=utf-8 fileencoding=utf-8 ff=unix

  " run xrdb whenever Xdefaults or Xresources are updated
  autocmd BufWritePost X{resources,defaults} silent !xrdb %

  " Encoding for cddb files
  autocmd BufNewFile,BufRead *cddb* set encoding=utf-8 fileencoding=utf-8 ff=unix

  " Enable spelling for text files
  autocmd BuFNewFile,BufRead {*.txt,*.md,*.adoc,*.asciidoc,*.rst} if &filetype !~ 'man\|help\|*doc' | setlocal spell | endif

  " Disable numbers & spell inside manpages
  autocmd FileType {man,help,*doc} setlocal nonumber norelativenumber nospell nolist nocursorcolumn

  " Disable folding in previews
  autocmd BufWinEnter * if &previewwindow | setlocal nofoldenable | endif

  " When editing a file, always jump to the last known cursor position.
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " Reload user defined highlights after changing colorschemes
  autocmd VimEnter,ColorScheme * call User_highlights()

  " Reload statusline after changing windows/buffer/tab
  autocmd BufEnter * setlocal statusline=%!MyStatusline()
  autocmd BufEnter * setlocal tabline=%!MyTabline()

  " Resize windows automagically
  autocmd VimResized * :wincmd =

  " Automatically reload vimrc when it's saved
  autocmd BufWritePost vimrc,.vimrc nested source $MYVIMRC
augroup END

" Enable syntax code completion
if has("autocmd") && exists("+omnifunc")
  autocmd Filetype *
    \ if &omnifunc == "" |
    \  setlocal omnifunc=syntaxcomplete#Complete |
    \ endif
endif
" Auto commands }}}

" {{{1 Functions
function! User_highlights() abort
  " https://gist.github.com/ahmedelgabri/b9127dfe36ba86f4496c8c28eb65ef2b
  let bgcolorgui=synIDattr(synIDtrans(hlID("StatusLine")), "bg", "gui")
  let bgcolorterm=synIDattr(synIDtrans(hlID("StatusLine")), "bg", "cterm")

  exe 'highlight User1 cterm=reverse gui=reverse'
  exe 'highlight User2 cterm=bold gui=bold'

  exe 'highlight Status1 ctermfg=7 ctermbg=1 guifg=#eff1f4 guibg=#e05a72'
  exe 'highlight Status2 ctermfg=7 ctermbg=2 guifg=#eff1f4 guibg=#59b387'
  exe 'highlight Status3 ctermfg=0 ctermbg=3 guifg=#2e3440 guibg=#ffcc66'
  exe 'highlight Status4 ctermfg=7 ctermbg=4 guifg=#eff1f4 guibg=#5f87af'

  exe 'highlight Mode1 ctermfg=7 ctermbg=2 guifg=#eff1f4 guibg=#59b387'
  exe 'highlight Mode2 ctermfg=7 ctermbg=4 guifg=#eff1f4 guibg=#5f87af'
  exe 'highlight Mode3 ctermfg=0 ctermbg=3 guifg=#2e3440 guibg=#ffcc66'
  exe 'highlight Mode4 ctermfg=7 ctermbg=1 guifg=#eff1f4 guibg=#e05a72'
endfunction

function! s:sy_stats_wrapper()
  let symbols = ['+', '-', '~']
  let [added, modified, removed] = sy#repo#get_stats()
  let stats = [added, removed, modified]  " reorder
  let hunkline = ''

  for i in range(3)
    if stats[i] > 0
      let hunkline .= printf('%s%s ', symbols[i], stats[i])
    endif
  endfor

  if !empty(hunkline)
    let hunkline = printf(' %s', hunkline[:-2])
  endif

  return hunkline
endfunction

function! MU()
  return get(g:mucomplete#msg#short_methods,
    \        get(g:, 'mucomplete_current_method', ''), '')
endfunction

" make list-like commands more intuitive
" see https://gist.github.com/romainl/047aca21e338df7ccf771f96858edb86
function! CCR()
  let cmdline = getcmdline()
  if cmdline =~ '\v\C^(ls|files|buffers)'
    " like :ls but prompts for a buffer command
    return "\<CR>:b "
  elseif cmdline =~ '\v\C/(#|nu|num|numb|numbe|number)$'
    " like :g//# but prompts for a command
    return "\<CR>:"
  elseif cmdline =~ '\v\C^(dli|il)'
    " like :dlist or :ilist but prompts for a count for :djump or :ijump
    return "\<CR>:" . cmdline[0] . "j " . split(cmdline, " ")[1] . "\<S-Left>\<Left>"
  elseif cmdline =~ '\v\C^(cli|lli)'
    " like :clist or :llist but prompts for an error/location number
    return "\<CR>:sil " . repeat(cmdline[0], 2) . "\<Space>"
  elseif cmdline =~ '\C^old'
    " like :oldfiles but prompts for an old file to edit
    set nomore
    return "\<CR>:sil se more|e #<"
  elseif cmdline =~ '\C^changes'
    " like :changes but prompts for a change to jump to
    set nomore
    return "\<CR>:sil se more|norm! g;\<S-Left>"
  elseif cmdline =~ '\C^ju'
    " like :jumps but prompts for a position to jump to
    set nomore
    return "\<CR>:sil se more|norm! \<C-o>\<S-Left>"
  elseif cmdline =~ '\C^marks'
    " like :marks but prompts for a mark to jump to
    return "\<CR>:norm! `"
  elseif cmdline =~ '\C^undol'
    " like :undolist but prompts for a change to undo
    return "\<CR>:u "
  elseif cmdline =~ '\C^reg'
    " like :registers but prompts for the register to paste
    return "\<CR>:norm! \"p\<Left>"
  else
    return "\<CR>"
  endif
endfunction
cnoremap <expr> <CR> CCR()

" Functions }}}

finish
Vim is ignoring *all* text after finish.
