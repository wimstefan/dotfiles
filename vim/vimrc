" Just a few settings
" Check settings with ":verbose set <setting>?"
" vim: fdm=marker fdl=0 tw=200

" utf-8 settings
scriptencoding utf-8
set encoding=utf-8
set termencoding=utf-8
let mapleader = "\<Space>"

" Plugins " {{{1
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd! VimEnter * PlugInstall
endif
nnoremap ,pc :PlugClean<CR>
nnoremap ,pi :PlugInstall<CR>
nnoremap ,ps :PlugStatus<CR>
nnoremap ,pu :PlugUpdate<CR>
let g:plug_shallow = 0

silent! if  plug#begin('~/.vim/plugged')
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
" fzf config {{{2
  set rtp+=~/.fzf
" }}}
Plug 'junegunn/fzf.vim'
" fzf.vim config {{{2
  function! s:build_quickfix_list(lines)
    call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
    copen
    cc
  endfunction

  let g:fzf_buffers_jump               = 1
  let g:fzf_action                     = {
                                         \ 'ctrl-q': function('s:build_quickfix_list'),
                                         \ 'ctrl-t': 'tab split',
                                         \ 'ctrl-x': 'split',
                                         \ 'ctrl-v': 'vsplit' }
  let g:fzf_layout                     = { 'right': '~30%' }

  command! -bang -nargs=* Rg call fzf#vim#grep('rg --vimgrep --color=always '.shellescape(<q-args>), 1, <bang>0)
  autocmd VimEnter * command! Colors call fzf#vim#colors({'left': '20%'})
  nnoremap          <Leader>p            :Files<CR>
  nnoremap          <Leader>a            :Rg<Space>
  nnoremap          <Leader>b            :Buffers<CR>
  nnoremap          <Leader>c            :Colors<CR>
  nnoremap          <Leader>m            :History<CR>
  imap              <C-x><C-j>           <plug>(fzf-complete-file-ag)
  imap              <C-x><C-l>           <plug>(fzf-complete-line)
" }}}
Plug 'junegunn/vim-peekaboo'
" vim-peekaboo config {{{2
  let g:peekaboo_ins_prefix            = '<C-x>'
" }}}
Plug 'junegunn/goyo.vim'
" goyo.vim config {{{2
  nnoremap <silent> ,tg                  :Goyo<CR>
  let g:goyo_width                     = 114
" }}}
Plug 'junegunn/limelight.vim'
" limelight.vim config {{{2
  nnoremap <silent> ,tl                  :Limelight!!<CR>
  let g:limelight_conceal_ctermfg      = 238
  let g:limelight_conceal_guifg        = '#444444'
  let g:limelight_default_coefficient  = 2.4
" }}}
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-vinegar'
Plug 'machakann/vim-sandwich'
Plug 'justinmk/vim-sneak'
" vim-sneak config {{{2
  let g:sneak#prompt                   = '[sneak] '
  let g:sneak#label                    = 1
  let g:sneak#s_next                   = 1
  nmap              f                    <Plug>Sneak_f
  nmap              F                    <Plug>Sneak_F
  xmap              f                    <Plug>Sneak_f
  xmap              F                    <Plug>Sneak_F
  omap              f                    <Plug>Sneak_f
  omap              F                    <Plug>Sneak_F
  nmap              t                    <Plug>Sneak_t
  nmap              T                    <Plug>Sneak_T
  xmap              t                    <Plug>Sneak_t
  xmap              T                    <Plug>Sneak_T
  omap              t                    <Plug>Sneak_t
  omap              T                    <Plug>Sneak_T
  nmap              s                    <Plug>Sneak_s
  nmap              S                    <Plug>Sneak_S
  xmap              s                    <Plug>Sneak_s
  xmap              S                    <Plug>Sneak_S
  omap              s                    <Plug>Sneak_s
  omap              S                    <Plug>Sneak_S
" }}}
Plug 'lambdalisue/gina.vim'
" git related config {{{2
  nnoremap          <Leader>gc           :<C-u>Gina commit -v --opener=vsplit
  nnoremap          <Leader>gd           :<C-u>Gina compare :<CR>
  nnoremap          <Leader>gl           :<C-u>Gina log --opener=vsplit :<CR>
  nnoremap          <Leader>gp           :<C-u>Gina patch --oneside<CR>
  nnoremap          <Leader>gs           :<C-u>Gina status --opener=vsplit<CR>
  nnoremap          <Leader>tig          :!tig<CR>:redraw!<CR>
" }}}
Plug 'mhinz/vim-signify'
" vim-signify config {{{2
  let g:signify_sign_add               = '+'
  let g:signify_sign_change            = '!'
  let g:signify_sign_delete            = '-'
  let g:signify_sign_delete_first_line = '‾'
  let g:signify_line_highlight         = 1
  let g:signify_update_on_focusgained  = 1
  nnoremap          ,tsg                 :SignifyToggle<CR>
  nnoremap          ,tsh                 :SignifyToggleHighlight<CR>
" }}}
Plug 'mhinz/vim-sayonara', {'on': 'Sayonara' }
Plug 'mhinz/vim-grepper'
" vim-grepper config {{{2
  nmap              gs                   <plug>(GrepperOperator)
  xmap              gs                   <plug>(GrepperOperator)
  nnoremap          <leader>g            :Grepper<CR>
  nnoremap          <leader>*            :Grepper -cword -noprompt<cr>
  let g:grepper                        = {}
  let g:grepper.tools                  = ['rg', 'ag', 'ack', 'grep', 'findstr', 'pt']
  let g:grepper.next_tool              = '<leader>g'
" }}}
Plug 'romainl/vim-qf'
" vim-qf config {{{2
  let g:qf_mapping_ack_style           = 1
  let g:qf_auto_open_quickfix          = 0
  nmap              <C-q>                <Plug>QfSwitch
  nmap              <C-c>                <Plug>QfCtoggle
  nmap              <C-l>                <Plug>QfLtoggle
  nmap              <Home>               <Plug>QfCprevious
  nmap              <End>                <Plug>QfCnext
  nmap              <C-Home>             <Plug>QfLprevious
  nmap              <C-End>              <Plug>QfLnext
" }}}
Plug 'romainl/vim-qlist'
Plug 'lifepillar/vim-mucomplete'
" vim-mucomplete config {{{2
  let g:mucomplete#enable_auto_at_startup = 1
  let g:mucomplete#chains              = { 'default' : [ 'path', 'omni', 'keyn', 'dict', 'uspl', 'user' ] }
  nnoremap <silent> ,ta                  :MUcompleteAutoToggle<CR>
" }}}
Plug 'wellle/tmux-complete.vim'
Plug 'wellle/targets.vim'
Plug 'simnalamburt/vim-mundo', { 'on': 'MundoToggle' }
" vim-mundo config {{{2
  let g:mundo_verbose_graph            = 0
  let g:mundo_width                    = 28
  let g:mundo_preview_bottom           = 1
  let g:mundo_preview_height           = 14
  nnoremap          ,tu                  :MundoToggle<CR>
" }}}
Plug 'Yggdroot/indentLine'
" indentLine config {{{2
  let g:indentLine_char                = "┊"
  let g:indentLine_fileTypeExclude     = [ 'help', 'man' ]
  nnoremap          ,ti                  :IndentLinesToggle<CR>
" }}}
Plug 'fcpg/vim-spotlightify'
Plug 'xtal8/traces.vim'
Plug 'andymass/vim-matchup'
Plug 'brooth/far.vim'
Plug 'qpkorr/vim-renamer'
Plug 'will133/vim-dirdiff'
" vim-dirdiff config {{{2
  let g:DirDiffExcludes                = ".git,.svn,CVS,*.class,*.exe,.*.swp,*.pyc,*.so,*.png,*.jp*g,*.svg,*.tiff"
" }}}
Plug 'vim-voom/VOoM'
" VOoM config {{{2
  let g:voom_tree_width                = 40
  let g:voom_ft_modes                  = {'adoc': 'asciidoc', 'asciidoc': 'asciidoc', 'markdown': 'markdown', 'md': 'markdown', 'rst': 'rest', 'tex': 'latex'}
  nnoremap          ,tv                  :VoomToggle<CR>
" }}}
Plug 'rkitover/vimpager'
Plug 'godlygeek/tabular' | Plug 'dhruvasagar/vim-table-mode'
" tabular config {{{2
  nnoremap          <Leader><Tab>        :Tabularize<Space>
  vnoremap          <Leader><Tab>        :Tabularize<Space>
" }}}
" vim-table-mode config {{{2
  let g:table_mode_auto_align          = 1
" }}}
Plug 'jamessan/vim-gnupg'
Plug 'mattn/webapi-vim' | Plug 'mattn/gist-vim', { 'on': 'Gist' }
" webapi-vim config {{{2
  let g:gist_post_private              = 1
  let g:gist_clip_command              = 'xclip -selection clipboard'
" }}}
Plug 'cespare/vim-toml'
Plug 'vim-scripts/SyntaxAttr.vim'
" SyntaxAttr.vim config {{{2
  nnoremap          <F12>                :call SyntaxAttr()<CR>
" }}}
Plug 'vim-scripts/visSum.vim'
Plug 'chrisbra/unicode.vim'
" unicode.vim config {{{2
  let g:Unicode_ShowPreviewWindow      = 1
  nnoremap          <Leader>us           :UnicodeSearch<Space>
  nnoremap          <Leader>ut           :UnicodeTable<CR>
  nnoremap          ga                   :UnicodeName<CR>
" }}}
Plug 'chrisbra/Colorizer', { 'on': 'ColorToggle' }
" Colorizer config {{{2
  nnoremap          ,tc                  :ColorToggle<CR>
" }}}
Plug '$HOME/.vim/plugged/my-base16-vim'
Plug '~/.vim/plugged/vim-adapted/'
Plug 'wimstefan/ligero-theme'
Plug 'wimstefan/Lightning'
Plug 'romainl/Apprentice'
Plug 'NLKNguyen/papercolor-theme'
" papercolor-theme config {{{2
let g:PaperColor_Theme_Options = {
  \   'theme': {
  \     'default': {
  \       'allow_bold': 1,
  \       'allow_italic': 1,
  \       'transparent_background': 1,
  \     }
  \   }
  \ }
" }}}
Plug 'arcticicestudio/nord-vim'
" nord-vim config {{{2
  let g:nord_italic                    =  1
  let g:nord_italic_comments           =  1
  let g:nord_comment_brightness        = 14
  let g:nord_uniform_diff_background   =  1
" }}}

call plug#end()
endif
" " }}}

" General Settings " {{{1
filetype indent plugin on
syntax   on
runtime  ftplugin/man.vim

set backspace=indent,eol,start         " allow backspacing over everything in insert mode
set shiftwidth=2                       " number of spaces used for indention
let &softtabstop = &shiftwidth         " number of spaces that a <Tab> counts for
set shiftround                         " round indent to multiple of 'shiftwidth'
set expandtab                          " use spaces to insert a <Tab>
set smarttab                           " smart tab handling for indenting
set autoindent                         " set autoindenting on
set selection=exclusive                " defines the behaviour of the selection

set hidden                             " allow buffers to go in background without saving etc.
set autowrite                          " save automatically before critical operations
set autoread                           " automatically reads & loads changes
set nobackup                           " keep a backup file
set noswapfile                         " create a swapfile

"set viminfo='50,\"100,:100,%          " read/write a viminfo file with buffer list
set viminfo='50,\"100,:100             " read/write a viminfo file without buffer list
if has ('nvim')
  set viminfo+=n$HOME/.cache/nvim/viminfo " specify where to write the viminfo
else
  set viminfo+=n$HOME/.cache/vim/viminfo " specify where to write the viminfo
endif
set history=100                        " keep 100 lines of command line history

set number                             " show line numbers
set cursorcolumn                       " highlights the screen column of the cursor
set cursorline                         " highlights the screen line of the cursor
let &cc='+'.join(range(1,255),',+')    " highlights textwidth boundaries

" virtually wrap lines to fit on the screen
if exists('+linebreak')
  set linebreak showbreak=\ ›››\       " break & visually mark wrapped lines
endif
if has('patch594')
  set breakindent                      " keep indentation of wrapped lines
endif

set ignorecase                         " ignore case when using a search pattern
set smartcase                          " override 'ignorecase' when pattern has upper case characters
set incsearch                          " show matches while typing the query
set hlsearch                           " highlight search results

set list                               " display unprintable characters
set listchars=tab:→\ ,trail:·,eol:«,extends:◀,precedes:▶

set path+=**                          " list of directories which will be searched with find et al
set isfname=@,48-57,/,.,-,_,+,,,#,$,%,~,=,(,),[,],{,}     " allowed characters in file and path names

set wildmenu                           " use a scrollable menu for filename completions
set wildchar=<tab>                     " the char used for 'expansion' on the command line
set wildmode=list:longest,full         " show list of completions and complete as much as possible, then iterate full completions
set wildignore+=*.swp,*.bak,*.pyc,*.cache,*.dll,*.pdb,*.tar.*
set wildignore+=*/.git/**/*,*/.hg/**/*,*/.svn/**/*

set modeline                           " allow the execution of modelines
set showmode                           " shows mode
set showcmd                            " show uncompleted command
set showmatch                          " show matching hyphens
set diffopt=vertical,iwhite,filler     " split vertical, ignore whitespace & use filler
set splitright                         " set vertical splits to split to the right
set splitbelow                         " set horizontal splits to split to the bottom
set previewheight=24                   " set the height of the preview window
set scrolloff=4                        " minimal number of screen lines to keep above and below the cursor

set gdefault                           " always use global substitutions

" Use persistent undo
if has('persistent_undo')
  set undodir=$HOME/.cache/vim/undo
  set undolevels=5000
  set undofile
endif

" Help settings
set keywordprg=:help
nnoremap          <Leader>h            :help<Space>
nnoremap          <Leader>M            :Man<Space>
augroup help
  autocmd!
  autocmd WinNew * let w:new = 1
  autocmd FileType help,man if exists('w:new') | unlet w:new | winc K | endif
augroup END

" Clipboard settings
set clipboard+=unnamed               " yank+paste with the '*' register

" Mouse settings
set mouse=a                            " enable mouse in console
set mousemodel=popup_setpos
if !has('nvim')
  set ttymouse=sgr
endif

" vimpager settings
if exists('g:vimpager.enabled')
  let g:vimpager = {}
  let g:less     = {}
  let g:less.enabled = 0
  set colorcolumn=0
  set nolist
endif

" Completion settings
set complete-=i                        " included files
set complete-=t                        " tags
set complete+=kspell                   " currently active spell checking
" ins-completion-menu options
" set completeopt+=longest
set completeopt+=menuone
set completeopt+=noinsert
set completeopt+=noselect
set completeopt+=preview
set infercase                          " case of the match is adjusted depending on the typed text
if has("autocmd") && exists("+omnifunc")
  augroup completion
    autocmd!
    " define filetype specific syntax completion
    autocmd FileType css set omnifunc=csscomplete#CompleteCSS
    autocmd filetype xhtml,html,markdown,ctp set omnifunc=htmlcomplete#CompleteTags
    " syntax completion only if a specific plugin does not already exist for that filetype
    autocmd Filetype *
      \ if &omnifunc == "" |
      \   setlocal omnifunc=syntaxcomplete#Complete |
      \ endif
  endif
augroup END

" Fold settings
set foldenable                         " turn on folding
set foldmethod=indent                  " fold on indentation (only use marker if explicitly defined)
set foldlevel=100                      " don't autofold anything (but I can still fold manually)

" Search settings
if executable('rg')
  set grepprg=rg\ --vimgrep\ --no-heading
  set grepformat^=%f:%l:%c:%m
elseif executable('ag')
  " set grepprg=ag\ --nogroup\ --column\ --smart-case\ --nocolor\ --follow
  set grepprg=ag\ --vimgrep
  set grepformat=%f:%l:%c:%m
elseif executable('ack')
  set grepprg=ack\ --nogroup\ --column\ --smart-case\ --nocolor\ --follow\ $*
  set grepformat=%f:%l:%c:%m
endif

" Spell settings
set spelllang=nl,en,de,es
set spellfile=~/.vim/spell/myspell.utf-8.add
set spellsuggest=fast
if $USER=='root'
  set nospell
else
  set nospell
endif

" Print settings
set printoptions=paper:A4,header:0

" Netrw settings
let g:netrw_winsize                    = 20
let g:netrw_liststyle                  = 3
let g:netrw_preview                    = 0
let g:netrw_alto                       = 0
nnoremap <silent> <Leader>x              :Lexplore<CR>

" " }}}

" Visual " {{{1
set background=light
if has('nvim')
    set termguicolors
else
  let &t_8f="\e[38;2;%lu;%lu;%lum"
  let &t_8b="\e[48;2;%lu;%lu;%lum"
  set termguicolors
endif
if &term =~ "linux"
  color base16-google-dark
else
  if has('gui_running')
    if $USER=='root'
      color apprentice
    else
      if filereadable(expand("~/.vimrc_background"))
        source ~/.vimrc_background
      elseif filereadable(expand("~/.config/colorscheme"))
        source ~/.config/colorscheme
      else
        color lucius
      endif
    endif
  else
    if $USER=='root'
      if filereadable(expand("~/.vimrc_background"))
        source ~/.vimrc_background
      elseif filereadable(expand("~/.config/colorscheme"))
        source ~/.config/colorscheme
      else
        color apprentice
      endif
    else
      if filereadable(expand("~/.vimrc_background"))
        source ~/.vimrc_background
      elseif filereadable(expand("~/.config/colorscheme"))
        source ~/.config/colorscheme
      else
        color lucius
      endif
    endif
  endif
endif

if has('gui_running')
  set guifont=Operator\ Mono\ weight=330\ 9
  set guioptions-=T                    " disable toolbar
  set guioptions-=l                    " disable left scrollbar
  set guioptions-=L
  set guioptions-=r                    " disable right scrollbar
  set guioptions-=R
  set guioptions-=e                    " disables the GUI tab line in favor of the plain text version
endif

" Statusline " {{{2
set laststatus=2                       " always show the statusline above

function! MyStatusline()
  let stl  = ''
  if $USER=='root'
    let stl .= '%#Status1# ■ '
  else
    let stl .= ' ■ '
  endif
  let stl .= '%1* %f %*'
  if $USER=='root'
    let stl .= '%#Status1# ■ %*'
  else
    let stl .= ' ■ %*'
  endif
  let stl .= '%#Status2#%{&modified ? " ✓ " : ""}%*'
  let stl .= '%#Status1#%{&ro ? " ✗ " : ""}%*'
  let stl .= '%= '
  if gina#component#repo#name() != '' && winwidth(0) > 70
    let branchy = gina#component#repo#branch()
    let stl    .= (branchy == 'master') ? '· master' : '· '. branchy
    if exists('g:loaded_signify')
      let stl  .= s:sy_stats_wrapper().' '
    endif
    let statys = gina#component#status#preset()
    let stl    .= (statys != '') ? '⋄ ' . statys . ' ' : ''
    let stl    .= '· '
  endif
  let stl .= '%y'
  if winwidth(0) > 70
    if &fileformat != 'unix'
      let stl .= ' %{&encoding}[%{&fileformat}] '
    else
      let stl .= ' %{&encoding} '
    endif
  endif
    let stl .= '%1* %l:%-2c %*'
    let stl .= ' %p%% '
  return stl
  call User_highlights()
endfunction
setlocal statusline=%!MyStatusline()
" " }}}2
" " }}}

" Formatting " {{{1
set comments=b:#,fb:-,fb:*,fb:o,:%,n:>|
set formatoptions=tcrqwnbj
set nrformats-=octal                   " do not recognize octal numbers for Ctrl-A and Ctrl-X
nnoremap Q gwap
vnoremap Q gw

" " }}}

" Key bindings & abbreviations " {{{1

" open/source $MYVIMRC
nnoremap          <Leader>ev             :edit    $MYVIMRC<CR>
nnoremap          <Leader>sv             :source  $MYVIMRC<CR>

" files
nnoremap <silent> cd                     :<C-u>cd %:h \| pwd<CR>
nnoremap          <Leader>e              :e **/*<C-d>
nnoremap          <Leader>f              :find *
nnoremap          <Leader>s              :sfind *
nnoremap          <Leader>l              :silent Locate<Space>
nnoremap          <Leader>w              :w!<CR>
nnoremap          <Leader>wa             :wa!<CR>
nnoremap          <Leader>q              :q!<CR>
nnoremap          <Leader>qa             :qa!<CR>
nnoremap          <Leader>wqa             :wqa!<CR>

" buffers
nnoremap          <Leader>bn             :bnext<CR>
nnoremap          <Leader>bp             :bprev<CR>
nnoremap          <Leader>bd             :Sayonara<CR>

" tabs
nnoremap          <Leader>tn             :tabnext<CR>
nnoremap          <Leader>tp             :tabprev<CR>
nnoremap          <Leader>td             :tabclose<CR>

" signatures
nnoremap          <Leader>sa 1G:s#\(Stefan Wimmer\) <.*>#\1 <stefan@tangoartisan.com>#<CR>
  \ G?--<CR>
  \ jVGd :r ~/.mutt/short-signature-artisan<CR>
  \ /^To:<CR>
nnoremap          <Leader>sg 1G:s#\(Stefan Wimmer\) <.*>#\1 <wimstefan@gmail.com>#<CR>
  \ G?--<CR>
  \ jVGd :r ~/.mutt/short-signature-gmail<CR>
  \ /^To:<CR>
nnoremap          <Leader>st G?--<CR>jVGd :r ~/.mutt/short-signature-tango<CR>
nnoremap          <Leader>ss G?--<CR>jVGd :r ~/.mutt/short-signature<CR>
nnoremap          <Leader>sl G?--<CR>jVGd :r ~/.mutt/signature<CR>

" some ideas stolen from tpope/vim-unimpaired
function! s:statusbump() abort
  let &l:readonly = &l:readonly
  return ''
endfunction

function! s:toggle(op) abort
  call s:statusbump()
  return eval('&'.a:op) ? 'no'.a:op : a:op
endfunction

function! s:option_map(letter, option, mode) abort
  exe 'nnoremap [o'.a:letter ':'.a:mode.' '.a:option.'<C-r>=<SID>statusbump()<CR><CR>'
  exe 'nnoremap ]o'.a:letter ':'.a:mode.' no'.a:option.'<C-r>=<SID>statusbump()<CR><CR>'
  exe 'nnoremap co'.a:letter ':'.a:mode.' <C-r>=<SID>toggle("'.a:option.'")<CR><CR>'
endfunction

nnoremap [ob :set background=light<CR>
nnoremap ]ob :set background=dark<CR>
nnoremap cob :set background=<C-r>=&background == 'dark' ? 'light' : 'dark'<CR><CR>
call s:option_map('c', 'cursorline', 'setlocal')
call s:option_map('u', 'cursorcolumn', 'setlocal')
nnoremap [od :diffthis<CR>
nnoremap ]od :diffoff<CR>
nnoremap cod :<C-r>=&diff ? 'diffoff' : 'diffthis'<CR><CR>
call s:option_map('h', 'hlsearch', 'set')
call s:option_map('i', 'ignorecase', 'set')
call s:option_map('l', 'list', 'setlocal')
call s:option_map('n', 'number', 'setlocal')
call s:option_map('r', 'relativenumber', 'setlocal')
call s:option_map('s', 'spell', 'setlocal')
nnoremap [ox :set cursorline cursorcolumn<CR>
nnoremap ]ox :set nocursorline nocursorcolumn<CR>
nnoremap cox :set <C-r>=&cursorline && &cursorcolumn ? 'nocursorline nocursorcolumn' : 'cursorline cursorcolumn'<CR><CR>
nnoremap com :<C-u>set colorcolumn=<C-R>=&colorcolumn == '+'.join(range(1,255),',+') ? '' : '+'.join(range(1,255),',+')<CR><CR><CR>
nmap [<Space> O<Esc>j
nmap ]<Space> o<Esc>k

" various
set pastetoggle=<F3>

" Abbreviations
source $HOME/.vim/abbreviations.vim
" " }}}

" Auto commands " {{{1
augroup vimrc
  autocmd!
  " Automatically chmod +x Shell and Perl scripts
  autocmd BufWritePost {*.sh,*.pl,*.py} silent !chmod +x %

  " Commentstrings
  autocmd FileType xdefaults setlocal commentstring=!\%s
  autocmd FileType mail setlocal commentstring=>\%s

  " Typical mutt thing ... replace > > with >>
  autocmd BufRead /tmp/mutt* silent! %s/^\([>|]\s\?\)\+/\=substitute(submatch(0), '\s', '', 'g').' '
  autocmd BufRead /tmp/mutt* set nonumber nohls nolist filetype=mail formatoptions=tcroqwln21
  autocmd BufRead /tmp/mutt* setlocal spell

  " Syntax for tmux
  autocmd BufNewFile,BufRead *tmux*conf* set filetype=tmux

  " Syntax for conkyrc
  autocmd BufNewFile,BufRead *conkyrc* set filetype=conkyrc

  " Syntax for htp files
  autocmd BufNewFile,BufRead {*.htp,*.htt} set filetype=xhtml

  " Syntax for xmp files
  autocmd BufNewFile,BufRead {*.xmp} set filetype=xml

  " Syntax for fvwm files
  autocmd BufNewFile,BufRead */.fvwm*/* set filetype=fvwm syntax=fvwm

  " Syntax for Xorg log files
  autocmd BufNewFile,BufRead *Xorg*log* set filetype=msmessages

  " Change fileformat on playlist files (created by moc)
  autocmd BufNewFile,BufRead *.m3u set encoding=utf-8 fileencoding=utf-8 ff=unix

  " Encoding for cddb files
  autocmd BufNewFile,BufRead *cddb* set encoding=utf-8 fileencoding=utf-8 ff=unix

  " Disable numbers & spell inside manpages
  autocmd FileType {man,help,perldoc,pydoc}  set nonumber nospell nolist nocursorcolumn

  " When editing a file, always jump to the last known cursor position.
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \       exe "normal g`\"" |
    \ endif

  " Reload user defined highlights after changing colorschemes
  autocmd VimEnter,ColorScheme * call User_highlights()

  " Reload statusline after changing windows/buffer/tab
  autocmd BufEnter * setlocal statusline=%!MyStatusline()

  " Resize windows automagically
  autocmd VimResized * :wincmd =

  " Automatically reload vimrc when it's saved
  autocmd BufWritePost vimrc,.vimrc nested source $MYVIMRC
augroup END
" " }}}

" Functions " {{{1
function! User_highlights() abort
  highlight CursorLine cterm=bold,italic gui=bold,italic
  highlight Search ctermfg=238 ctermbg=153 guifg=#444444 guibg=#afd7ff
  highlight User1 cterm=reverse gui=reverse

  exec 'highlight Status1 ctermfg=1 guifg=#e05a72 guibg=' . synIDattr(hlID('StatusLine'), 'bg')
  exec 'highlight Status2 ctermfg=2 guifg=#59b387 guibg=' . synIDattr(hlID('StatusLine'), 'bg')
  exec 'highlight Status3 ctermfg=3 guifg=#ffffaf guibg=' . synIDattr(hlID('StatusLine'), 'bg')
  exec 'highlight Status4 ctermfg=4 guifg=#5f87af guibg=' . synIDattr(hlID('StatusLine'), 'bg')
endfunction

function! s:sy_stats_wrapper()
  let symbols = ['+', '-', '~']
  let [added, modified, removed] = sy#repo#get_stats()
  let stats = [added, removed, modified]  " reorder
  let hunkline = ''

  for i in range(3)
    if stats[i] > 0
      let hunkline .= printf('%s%s ', symbols[i], stats[i])
    endif
  endfor

  if !empty(hunkline)
    let hunkline = printf(' %s', hunkline[:-2])
  endif

  return hunkline
endfunction

" " }}}

finish
Vim is ignoring *all* text after finish.
